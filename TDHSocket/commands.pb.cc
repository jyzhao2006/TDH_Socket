// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "commands.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* Value_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Value_reflection_ = NULL;
const ::google::protobuf::Descriptor* Expression_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Expression_reflection_ = NULL;
const ::google::protobuf::Descriptor* Function_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Function_reflection_ = NULL;
const ::google::protobuf::Descriptor* ValuesArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ValuesArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* ColumnsArray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColumnsArray_reflection_ = NULL;
const ::google::protobuf::Descriptor* Column_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Column_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Column_AGGREGATE_FUNC_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Column_ValueType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* OrderBy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OrderBy_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OrderBy_DIRECTION_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ResultSet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResultSet_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExtraMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExtraMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryCommon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryCommon_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* QueryCommon_QUERY_CONCURRENCY_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* QueryCommon_PlanType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* QueryCommon_LockModel_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Put_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Put_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Put_PUT_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Filter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Filter_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Filter_AccessType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CommandNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommandRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommandRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResultSetRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResultSetRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TransactionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PingRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PingRequest_reflection_ = NULL;
const ::google::protobuf::ServiceDescriptor* CommandExecutor_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_commands_2eproto() {
  protobuf_AddDesc_commands_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "commands.proto");
  GOOGLE_CHECK(file != NULL);
  Value_descriptor_ = file->message_type(0);
  static const int Value_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, integerval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, longval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, boolval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, stringval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, doubleval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, floatval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, charval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, bindval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, dateval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, null_),
  };
  Value_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Value_descriptor_,
      Value::default_instance_,
      Value_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Value));
  Expression_descriptor_ = file->message_type(1);
  static const int Expression_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expression, column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expression, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expression, function_),
  };
  Expression_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Expression_descriptor_,
      Expression::default_instance_,
      Expression_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expression, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Expression, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Expression));
  Function_descriptor_ = file->message_type(2);
  static const int Function_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, functionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, expression_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, alias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, distinct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, columnname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, isnot_),
  };
  Function_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Function_descriptor_,
      Function::default_instance_,
      Function_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Function, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Function));
  ValuesArray_descriptor_ = file->message_type(3);
  static const int ValuesArray_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValuesArray, values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValuesArray, empty_),
  };
  ValuesArray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ValuesArray_descriptor_,
      ValuesArray::default_instance_,
      ValuesArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValuesArray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ValuesArray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ValuesArray));
  ColumnsArray_descriptor_ = file->message_type(4);
  static const int ColumnsArray_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnsArray, columns_),
  };
  ColumnsArray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColumnsArray_descriptor_,
      ColumnsArray::default_instance_,
      ColumnsArray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnsArray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnsArray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColumnsArray));
  Column_descriptor_ = file->message_type(5);
  static const int Column_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, columnname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, valuetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, aggegatefunction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, alias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, distinct_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, isnot_),
  };
  Column_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Column_descriptor_,
      Column::default_instance_,
      Column_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Column, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Column));
  Column_AGGREGATE_FUNC_descriptor_ = Column_descriptor_->enum_type(0);
  Column_ValueType_descriptor_ = Column_descriptor_->enum_type(1);
  OrderBy_descriptor_ = file->message_type(6);
  static const int OrderBy_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBy, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBy, column_),
  };
  OrderBy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OrderBy_descriptor_,
      OrderBy::default_instance_,
      OrderBy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OrderBy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OrderBy));
  OrderBy_DIRECTION_descriptor_ = OrderBy_descriptor_->enum_type(0);
  ResultSet_descriptor_ = file->message_type(7);
  static const int ResultSet_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultSet, keycolumns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultSet, keyrows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultSet, exception_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultSet, transactionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultSet, resultsetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultSet, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultSet, valcolumns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultSet, valrows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultSet, extraroutemsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultSet, orderby_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultSet, selectioncolumn_),
  };
  ResultSet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResultSet_descriptor_,
      ResultSet::default_instance_,
      ResultSet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultSet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultSet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResultSet));
  ExtraMsg_descriptor_ = file->message_type(8);
  static const int ExtraMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraMsg, extraroutekey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraMsg, extraroutevalue_),
  };
  ExtraMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExtraMsg_descriptor_,
      ExtraMsg::default_instance_,
      ExtraMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExtraMsg));
  QueryCommon_descriptor_ = file->message_type(9);
  static const int QueryCommon_offsets_[30] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCommon, orderby_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCommon, limitfrom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCommon, limitto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCommon, valuefilters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCommon, selectioncolumn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCommon, groupby_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCommon, keyfilter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCommon, idxname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCommon, plannodetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCommon, subnodes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCommon, datanodekey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCommon, lockmodel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCommon, consistentread_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCommon, queryconcurrency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCommon, leftouter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCommon, rightouter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCommon, rightjoinoncolumn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCommon, leftjoinoncolumn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCommon, alias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCommon, requestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCommon, requesthostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCommon, subrequestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCommon, thread_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCommon, sharded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCommon, canmerge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCommon, usetemptableexplicit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCommon, actualtable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCommon, issubquery_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCommon, isunion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCommon, otherjoinfilter_),
  };
  QueryCommon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryCommon_descriptor_,
      QueryCommon::default_instance_,
      QueryCommon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCommon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryCommon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryCommon));
  QueryCommon_QUERY_CONCURRENCY_descriptor_ = QueryCommon_descriptor_->enum_type(0);
  QueryCommon_PlanType_descriptor_ = QueryCommon_descriptor_->enum_type(1);
  QueryCommon_LockModel_descriptor_ = QueryCommon_descriptor_->enum_type(2);
  Put_descriptor_ = file->message_type(10);
  static const int Put_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Put, querycommon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Put, columns_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Put, indexname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Put, puttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Put, updateval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Put, datanodekey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Put, thread_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Put, indexkey_),
  };
  Put_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Put_descriptor_,
      Put::default_instance_,
      Put_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Put, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Put, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Put));
  Put_PUT_TYPE_descriptor_ = Put_descriptor_->enum_type(0);
  Filter_descriptor_ = file->message_type(11);
  static const int Filter_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filter, column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filter, accesstype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filter, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filter, subchildren_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filter, values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filter, infromuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filter, isnot_),
  };
  Filter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Filter_descriptor_,
      Filter::default_instance_,
      Filter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Filter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Filter));
  Filter_AccessType_descriptor_ = Filter_descriptor_->enum_type(0);
  CommandNode_descriptor_ = file->message_type(12);
  static const int CommandNode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandNode, put_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandNode, querycommon_),
  };
  CommandNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandNode_descriptor_,
      CommandNode::default_instance_,
      CommandNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandNode));
  CommandRequest_descriptor_ = file->message_type(13);
  static const int CommandRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRequest, createnewtransaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRequest, transactionsequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRequest, cmdnode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRequest, extramsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRequest, fetchsize_),
  };
  CommandRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommandRequest_descriptor_,
      CommandRequest::default_instance_,
      CommandRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommandRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommandRequest));
  ResultSetRequest_descriptor_ = file->message_type(14);
  static const int ResultSetRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultSetRequest, resultsequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultSetRequest, fetchsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultSetRequest, extramsg_),
  };
  ResultSetRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResultSetRequest_descriptor_,
      ResultSetRequest::default_instance_,
      ResultSetRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultSetRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultSetRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResultSetRequest));
  TransactionRequest_descriptor_ = file->message_type(15);
  static const int TransactionRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRequest, transactionsequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRequest, extramsg_),
  };
  TransactionRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransactionRequest_descriptor_,
      TransactionRequest::default_instance_,
      TransactionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransactionRequest));
  LoginRequest_descriptor_ = file->message_type(16);
  static const int LoginRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, extramsg_),
  };
  LoginRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRequest_descriptor_,
      LoginRequest::default_instance_,
      LoginRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRequest));
  PingRequest_descriptor_ = file->message_type(17);
  static const int PingRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRequest, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRequest, extramsg_),
  };
  PingRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PingRequest_descriptor_,
      PingRequest::default_instance_,
      PingRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PingRequest));
  CommandExecutor_descriptor_ = file->service(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_commands_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Value_descriptor_, &Value::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Expression_descriptor_, &Expression::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Function_descriptor_, &Function::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ValuesArray_descriptor_, &ValuesArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColumnsArray_descriptor_, &ColumnsArray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Column_descriptor_, &Column::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OrderBy_descriptor_, &OrderBy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResultSet_descriptor_, &ResultSet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExtraMsg_descriptor_, &ExtraMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryCommon_descriptor_, &QueryCommon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Put_descriptor_, &Put::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Filter_descriptor_, &Filter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandNode_descriptor_, &CommandNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommandRequest_descriptor_, &CommandRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResultSetRequest_descriptor_, &ResultSetRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransactionRequest_descriptor_, &TransactionRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRequest_descriptor_, &LoginRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PingRequest_descriptor_, &PingRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_commands_2eproto() {
  delete Value::default_instance_;
  delete Value_reflection_;
  delete Expression::default_instance_;
  delete Expression_reflection_;
  delete Function::default_instance_;
  delete Function_reflection_;
  delete ValuesArray::default_instance_;
  delete ValuesArray_reflection_;
  delete ColumnsArray::default_instance_;
  delete ColumnsArray_reflection_;
  delete Column::default_instance_;
  delete Column_reflection_;
  delete OrderBy::default_instance_;
  delete OrderBy_reflection_;
  delete ResultSet::default_instance_;
  delete ResultSet_reflection_;
  delete ExtraMsg::default_instance_;
  delete ExtraMsg_reflection_;
  delete QueryCommon::default_instance_;
  delete QueryCommon_reflection_;
  delete Put::default_instance_;
  delete Put_reflection_;
  delete Filter::default_instance_;
  delete Filter_reflection_;
  delete CommandNode::default_instance_;
  delete CommandNode_reflection_;
  delete CommandRequest::default_instance_;
  delete CommandRequest_reflection_;
  delete ResultSetRequest::default_instance_;
  delete ResultSetRequest_reflection_;
  delete TransactionRequest::default_instance_;
  delete TransactionRequest_reflection_;
  delete LoginRequest::default_instance_;
  delete LoginRequest_reflection_;
  delete PingRequest::default_instance_;
  delete PingRequest_reflection_;
}

void protobuf_AddDesc_commands_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016commands.proto\022\010protobuf\"\266\001\n\005Value\022\022\n\n"
    "integerVal\030\002 \001(\005\022\017\n\007longVal\030\003 \001(\003\022\017\n\007boo"
    "lVal\030\004 \001(\010\022\021\n\tstringVal\030\005 \001(\t\022\021\n\tdoubleV"
    "al\030\006 \001(\001\022\020\n\010floatVal\030\007 \001(\002\022\017\n\007charVal\030\010 "
    "\001(\t\022\017\n\007bindVal\030\t \001(\005\022\017\n\007dateVal\030\n \001(\003\022\014\n"
    "\004null\030\013 \001(\010\"t\n\nExpression\022 \n\006column\030\001 \001("
    "\0132\020.protobuf.Column\022\036\n\005value\030\002 \001(\0132\017.pro"
    "tobuf.Value\022$\n\010function\030\003 \001(\0132\022.protobuf"
    ".Function\"\241\001\n\010Function\022\024\n\014functionName\030\001"
    " \001(\t\022(\n\nexpression\030\002 \003(\0132\024.protobuf.Expr"
    "ession\022\r\n\005alias\030\003 \001(\t\022\020\n\010distinct\030\004 \001(\010\022"
    "\021\n\ttableName\030\005 \001(\t\022\022\n\ncolumnName\030\006 \001(\t\022\r"
    "\n\005isNot\030\007 \001(\010\"=\n\013ValuesArray\022\037\n\006values\030\001"
    " \003(\0132\017.protobuf.Value\022\r\n\005empty\030\002 \001(\010\"1\n\014"
    "ColumnsArray\022!\n\007columns\030\001 \003(\0132\020.protobuf"
    ".Column\"\312\003\n\006Column\022\022\n\ncolumnName\030\001 \001(\t\022-"
    "\n\tvalueType\030\002 \001(\0162\032.protobuf.Column.Valu"
    "eType\0229\n\020aggegateFunction\030\003 \001(\0162\037.protob"
    "uf.Column.AGGREGATE_FUNC\022\r\n\005alias\030\004 \001(\t\022"
    "\020\n\010distinct\030\005 \001(\010\022\021\n\ttablename\030\006 \001(\t\022\r\n\005"
    "isNot\030\007 \001(\010\"?\n\016AGGREGATE_FUNC\022\t\n\005COUNT\020\001"
    "\022\007\n\003SUM\020\002\022\007\n\003MAX\020\003\022\007\n\003MIN\020\004\022\007\n\003AVG\020\005\"\275\001\n"
    "\tValueType\022\014\n\010LONG_VAL\020\001\022\r\n\tSHORT_VAL\020\002\022"
    "\017\n\013BOOLEAN_VAL\020\003\022\014\n\010CHAR_VAL\020\004\022\016\n\nSTRING"
    "_VAL\020\005\022\r\n\tFLOAT_VAL\020\006\022\016\n\nDOUBLE_VAL\020\007\022\013\n"
    "\007INT_VAL\020\010\022\014\n\010BIND_VAL\020\t\022\014\n\010DATE_VAL\020\n\022\r"
    "\n\tBYTES_VAL\020\013\022\r\n\tTIMESTAMP\020\014\"\177\n\007OrderBy\022"
    ".\n\tdirection\030\001 \001(\0162\033.protobuf.OrderBy.DI"
    "RECTION\022$\n\006column\030\002 \001(\0132\024.protobuf.Expre"
    "ssion\"\036\n\tDIRECTION\022\007\n\003ASC\020\001\022\010\n\004DESC\020\002\"\375\002"
    "\n\tResultSet\022(\n\nkeyColumns\030\001 \003(\0132\024.protob"
    "uf.Expression\022&\n\007keyRows\030\002 \003(\0132\025.protobu"
    "f.ValuesArray\022\021\n\texception\030\003 \001(\t\022\025\n\rtran"
    "sactionId\030\004 \001(\003\022\023\n\013resultSetId\030\005 \001(\005\022\017\n\007"
    "success\030\006 \001(\010\022(\n\nvalColumns\030\007 \003(\0132\024.prot"
    "obuf.Expression\022&\n\007valRows\030\010 \003(\0132\025.proto"
    "buf.ValuesArray\022)\n\rextraRouteMsg\030\t \001(\0132\022"
    ".protobuf.ExtraMsg\022\"\n\007orderBy\030\n \003(\0132\021.pr"
    "otobuf.OrderBy\022-\n\017selectionColumn\030\013 \003(\0132"
    "\024.protobuf.Expression\"Q\n\010ExtraMsg\022\025\n\rext"
    "raRouteKey\030\001 \003(\t\022.\n\017extraRouteValue\030\002 \001("
    "\0132\025.protobuf.ValuesArray\"\346\010\n\013QueryCommon"
    "\022\"\n\007orderBy\030\001 \003(\0132\021.protobuf.OrderBy\022\021\n\t"
    "limitFrom\030\002 \001(\003\022\017\n\007limitTo\030\003 \001(\003\022&\n\014valu"
    "eFilters\030\004 \001(\0132\020.protobuf.Filter\022-\n\017sele"
    "ctionColumn\030\005 \003(\0132\024.protobuf.Expression\022"
    "\"\n\007groupBy\030\006 \003(\0132\021.protobuf.OrderBy\022#\n\tk"
    "eyFilter\030\007 \001(\0132\020.protobuf.Filter\022\017\n\007idxN"
    "ame\030\010 \001(\t\0224\n\014planNodeType\030\t \001(\0162\036.protob"
    "uf.QueryCommon.PlanType\022\'\n\010subNodes\030\n \003("
    "\0132\025.protobuf.CommandNode\022\023\n\013dataNodeKey\030"
    "\014 \001(\t\0222\n\tlockModel\030\r \001(\0162\037.protobuf.Quer"
    "yCommon.LockModel\022\026\n\016consistentRead\030\016 \001("
    "\010\022A\n\020queryConcurrency\030\017 \001(\0162\'.protobuf.Q"
    "ueryCommon.QUERY_CONCURRENCY\022\021\n\tleftOute"
    "r\030\020 \001(\010\022\022\n\nrightOuter\030\021 \001(\010\022+\n\021rightJoin"
    "OnColumn\030\022 \003(\0132\020.protobuf.Column\022*\n\020left"
    "JoinOnColumn\030\023 \003(\0132\020.protobuf.Column\022\r\n\005"
    "alias\030\024 \001(\t\022\021\n\trequestID\030\025 \001(\003\022\027\n\017reques"
    "tHostName\030\026 \001(\t\022\024\n\014subRequestID\030\027 \001(\005\022\016\n"
    "\006thread\030\030 \001(\005\022\017\n\007sharded\030\031 \001(\010\022\020\n\010canMer"
    "ge\030\032 \001(\010\022\034\n\024useTempTableExplicit\030\033 \001(\010\022\023"
    "\n\013actualTable\030\034 \001(\t\022\022\n\nisSubQuery\030\035 \001(\010\022"
    "\017\n\007isUnion\030\036 \001(\010\022)\n\017otherJoinFilter\030\037 \001("
    "\0132\020.protobuf.Filter\"3\n\021QUERY_CONCURRENCY"
    "\022\016\n\nSEQUENTIAL\020\001\022\016\n\nCONCURRENT\020\002\"m\n\010Plan"
    "Type\022\022\n\016NEST_LOOP_JOIN\020\001\022\023\n\017SORT_MERGE_J"
    "OIN\020\002\022\r\n\tHASH_JOIN\020\003\022\t\n\005QUERY\020\004\022\023\n\017INDEX"
    "_NEST_LOOP\020\006\022\t\n\005MERGE\020\007\"0\n\tLockModel\022\017\n\013"
    "SHARED_LOCK\020\001\022\022\n\016EXCLUSIVE_LOCK\020\002\"\261\002\n\003Pu"
    "t\022*\n\013queryCommon\030\001 \001(\0132\025.protobuf.QueryC"
    "ommon\022%\n\007columns\030\002 \003(\0132\024.protobuf.Expres"
    "sion\022\021\n\tindexName\030\003 \001(\t\022\'\n\007putType\030\004 \001(\016"
    "2\026.protobuf.Put.PUT_TYPE\022\'\n\tupdateVal\030\005 "
    "\003(\0132\024.protobuf.Expression\022\023\n\013dataNodeKey"
    "\030\006 \001(\t\022\016\n\006thread\030\007 \001(\005\022\020\n\010indexKey\030\010 \001(\t"
    "\";\n\010PUT_TYPE\022\013\n\007REPLACE\020\001\022\n\n\006INSERT\020\002\022\n\n"
    "\006DELETE\020\003\022\n\n\006UPDATE\020\004\"\255\003\n\006Filter\022$\n\006colu"
    "mn\030\001 \001(\0132\024.protobuf.Expression\022/\n\naccess"
    "Type\030\002 \001(\0162\033.protobuf.Filter.AccessType\022"
    "#\n\005value\030\003 \001(\0132\024.protobuf.Expression\022)\n\013"
    "subChildren\030\004 \003(\0132\024.protobuf.Expression\022"
    "$\n\006values\030\005 \003(\0132\024.protobuf.Expression\022\022\n"
    "\ninFromUser\030\006 \001(\010\022\r\n\005isNot\030\007 \001(\010\"\262\001\n\nAcc"
    "essType\022\007\n\003AND\020\001\022\006\n\002OR\020\002\022\006\n\002GT\020\003\022\006\n\002LT\020\004"
    "\022\t\n\005GT_EQ\020\005\022\t\n\005LT_EQ\020\006\022\006\n\002EQ\020\007\022\010\n\004LIKE\020\010"
    "\022\013\n\007IS_NULL\020\t\022\017\n\013IS_NOT_NULL\020\n\022\n\n\006NOT_EQ"
    "\020\013\022\006\n\002IN\020\014\022\006\n\002IS\020\r\022\014\n\010CONSTANT\020\016\022\023\n\017NULL"
    "_SAFE_EQUAL\020\017\"U\n\013CommandNode\022\032\n\003put\030\001 \001("
    "\0132\r.protobuf.Put\022*\n\013queryCommon\030\002 \001(\0132\025."
    "protobuf.QueryCommon\"\254\001\n\016CommandRequest\022"
    "\034\n\024createNewTransaction\030\001 \001(\010\022\033\n\023transac"
    "tionSequence\030\002 \001(\003\022&\n\007cmdNode\030\003 \001(\0132\025.pr"
    "otobuf.CommandNode\022$\n\010extramsg\030\004 \001(\0132\022.p"
    "rotobuf.ExtraMsg\022\021\n\tfetchSize\030\005 \001(\005\"c\n\020R"
    "esultSetRequest\022\026\n\016resultSequence\030\001 \001(\005\022"
    "\021\n\tfetchSize\030\002 \001(\005\022$\n\010extramsg\030\003 \001(\0132\022.p"
    "rotobuf.ExtraMsg\"W\n\022TransactionRequest\022\033"
    "\n\023transactionSequence\030\001 \001(\003\022$\n\010extramsg\030"
    "\002 \001(\0132\022.protobuf.ExtraMsg\"T\n\014LoginReques"
    "t\022\014\n\004user\030\001 \001(\t\022\020\n\010password\030\002 \001(\t\022$\n\010ext"
    "ramsg\030\003 \001(\0132\022.protobuf.ExtraMsg\"@\n\013PingR"
    "equest\022\013\n\003msg\030\001 \001(\t\022$\n\010extramsg\030\002 \001(\0132\022."
    "protobuf.ExtraMsg2\254\004\n\017CommandExecutor\0222\n"
    "\004ping\022\025.protobuf.PingRequest\032\023.protobuf."
    "ResultSet\0224\n\005login\022\026.protobuf.LoginReque"
    "st\032\023.protobuf.ResultSet\0228\n\007execute\022\030.pro"
    "tobuf.CommandRequest\032\023.protobuf.ResultSe"
    "t\022<\n\tfetchNext\022\032.protobuf.ResultSetReque"
    "st\032\023.protobuf.ResultSet\022A\n\016closeResultSe"
    "t\022\032.protobuf.ResultSetRequest\032\023.protobuf"
    ".ResultSet\022;\n\006commit\022\034.protobuf.Transact"
    "ionRequest\032\023.protobuf.ResultSet\022=\n\010rollb"
    "ack\022\034.protobuf.TransactionRequest\032\023.prot"
    "obuf.ResultSet\0228\n\005first\022\032.protobuf.Resul"
    "tSetRequest\032\023.protobuf.ResultSet\022>\n\013befo"
    "reFirst\022\032.protobuf.ResultSetRequest\032\023.pr"
    "otobuf.ResultSetB&\n!com.taobao.ustore.co"
    "mmon.protobuf\210\001\001", 4736);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "commands.proto", &protobuf_RegisterTypes);
  Value::default_instance_ = new Value();
  Expression::default_instance_ = new Expression();
  Function::default_instance_ = new Function();
  ValuesArray::default_instance_ = new ValuesArray();
  ColumnsArray::default_instance_ = new ColumnsArray();
  Column::default_instance_ = new Column();
  OrderBy::default_instance_ = new OrderBy();
  ResultSet::default_instance_ = new ResultSet();
  ExtraMsg::default_instance_ = new ExtraMsg();
  QueryCommon::default_instance_ = new QueryCommon();
  Put::default_instance_ = new Put();
  Filter::default_instance_ = new Filter();
  CommandNode::default_instance_ = new CommandNode();
  CommandRequest::default_instance_ = new CommandRequest();
  ResultSetRequest::default_instance_ = new ResultSetRequest();
  TransactionRequest::default_instance_ = new TransactionRequest();
  LoginRequest::default_instance_ = new LoginRequest();
  PingRequest::default_instance_ = new PingRequest();
  Value::default_instance_->InitAsDefaultInstance();
  Expression::default_instance_->InitAsDefaultInstance();
  Function::default_instance_->InitAsDefaultInstance();
  ValuesArray::default_instance_->InitAsDefaultInstance();
  ColumnsArray::default_instance_->InitAsDefaultInstance();
  Column::default_instance_->InitAsDefaultInstance();
  OrderBy::default_instance_->InitAsDefaultInstance();
  ResultSet::default_instance_->InitAsDefaultInstance();
  ExtraMsg::default_instance_->InitAsDefaultInstance();
  QueryCommon::default_instance_->InitAsDefaultInstance();
  Put::default_instance_->InitAsDefaultInstance();
  Filter::default_instance_->InitAsDefaultInstance();
  CommandNode::default_instance_->InitAsDefaultInstance();
  CommandRequest::default_instance_->InitAsDefaultInstance();
  ResultSetRequest::default_instance_->InitAsDefaultInstance();
  TransactionRequest::default_instance_->InitAsDefaultInstance();
  LoginRequest::default_instance_->InitAsDefaultInstance();
  PingRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_commands_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_commands_2eproto {
  StaticDescriptorInitializer_commands_2eproto() {
    protobuf_AddDesc_commands_2eproto();
  }
} static_descriptor_initializer_commands_2eproto_;


// ===================================================================

const ::std::string Value::_default_stringval_;
const ::std::string Value::_default_charval_;
#ifndef _MSC_VER
const int Value::kIntegerValFieldNumber;
const int Value::kLongValFieldNumber;
const int Value::kBoolValFieldNumber;
const int Value::kStringValFieldNumber;
const int Value::kDoubleValFieldNumber;
const int Value::kFloatValFieldNumber;
const int Value::kCharValFieldNumber;
const int Value::kBindValFieldNumber;
const int Value::kDateValFieldNumber;
const int Value::kNullFieldNumber;
#endif  // !_MSC_VER

Value::Value()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Value::InitAsDefaultInstance() {
}

Value::Value(const Value& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Value::SharedCtor() {
  _cached_size_ = 0;
  integerval_ = 0;
  longval_ = GOOGLE_LONGLONG(0);
  boolval_ = false;
  stringval_ = const_cast< ::std::string*>(&_default_stringval_);
  doubleval_ = 0;
  floatval_ = 0;
  charval_ = const_cast< ::std::string*>(&_default_charval_);
  bindval_ = 0;
  dateval_ = GOOGLE_LONGLONG(0);
  null_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Value::~Value() {
  SharedDtor();
}

void Value::SharedDtor() {
  if (stringval_ != &_default_stringval_) {
    delete stringval_;
  }
  if (charval_ != &_default_charval_) {
    delete charval_;
  }
  if (this != default_instance_) {
  }
}

void Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Value::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Value_descriptor_;
}

const Value& Value::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();  return *default_instance_;
}

Value* Value::default_instance_ = NULL;

Value* Value::New() const {
  return new Value;
}

void Value::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    integerval_ = 0;
    longval_ = GOOGLE_LONGLONG(0);
    boolval_ = false;
    if (_has_bit(3)) {
      if (stringval_ != &_default_stringval_) {
        stringval_->clear();
      }
    }
    doubleval_ = 0;
    floatval_ = 0;
    if (_has_bit(6)) {
      if (charval_ != &_default_charval_) {
        charval_->clear();
      }
    }
    bindval_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    dateval_ = GOOGLE_LONGLONG(0);
    null_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 integerVal = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &integerval_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_longVal;
        break;
      }
      
      // optional int64 longVal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_longVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &longval_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_boolVal;
        break;
      }
      
      // optional bool boolVal = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boolVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &boolval_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stringVal;
        break;
      }
      
      // optional string stringVal = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stringVal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stringval()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->stringval().data(), this->stringval().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_doubleVal;
        break;
      }
      
      // optional double doubleVal = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_doubleVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &doubleval_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_floatVal;
        break;
      }
      
      // optional float floatVal = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_floatVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &floatval_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_charVal;
        break;
      }
      
      // optional string charVal = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charVal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charval()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charval().data(), this->charval().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_bindVal;
        break;
      }
      
      // optional int32 bindVal = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bindval_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_dateVal;
        break;
      }
      
      // optional int64 dateVal = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dateVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dateval_)));
          _set_bit(8);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_null;
        break;
      }
      
      // optional bool null = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_null:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &null_)));
          _set_bit(9);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 integerVal = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->integerval(), output);
  }
  
  // optional int64 longVal = 3;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->longval(), output);
  }
  
  // optional bool boolVal = 4;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->boolval(), output);
  }
  
  // optional string stringVal = 5;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stringval().data(), this->stringval().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->stringval(), output);
  }
  
  // optional double doubleVal = 6;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->doubleval(), output);
  }
  
  // optional float floatVal = 7;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->floatval(), output);
  }
  
  // optional string charVal = 8;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charval().data(), this->charval().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->charval(), output);
  }
  
  // optional int32 bindVal = 9;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->bindval(), output);
  }
  
  // optional int64 dateVal = 10;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->dateval(), output);
  }
  
  // optional bool null = 11;
  if (_has_bit(9)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->null(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Value::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 integerVal = 2;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->integerval(), target);
  }
  
  // optional int64 longVal = 3;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->longval(), target);
  }
  
  // optional bool boolVal = 4;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->boolval(), target);
  }
  
  // optional string stringVal = 5;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->stringval().data(), this->stringval().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->stringval(), target);
  }
  
  // optional double doubleVal = 6;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->doubleval(), target);
  }
  
  // optional float floatVal = 7;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->floatval(), target);
  }
  
  // optional string charVal = 8;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charval().data(), this->charval().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->charval(), target);
  }
  
  // optional int32 bindVal = 9;
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->bindval(), target);
  }
  
  // optional int64 dateVal = 10;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->dateval(), target);
  }
  
  // optional bool null = 11;
  if (_has_bit(9)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->null(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Value::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 integerVal = 2;
    if (has_integerval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->integerval());
    }
    
    // optional int64 longVal = 3;
    if (has_longval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->longval());
    }
    
    // optional bool boolVal = 4;
    if (has_boolval()) {
      total_size += 1 + 1;
    }
    
    // optional string stringVal = 5;
    if (has_stringval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stringval());
    }
    
    // optional double doubleVal = 6;
    if (has_doubleval()) {
      total_size += 1 + 8;
    }
    
    // optional float floatVal = 7;
    if (has_floatval()) {
      total_size += 1 + 4;
    }
    
    // optional string charVal = 8;
    if (has_charval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charval());
    }
    
    // optional int32 bindVal = 9;
    if (has_bindval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bindval());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 dateVal = 10;
    if (has_dateval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dateval());
    }
    
    // optional bool null = 11;
    if (has_null()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Value::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Value* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Value*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Value::MergeFrom(const Value& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_integerval(from.integerval());
    }
    if (from._has_bit(1)) {
      set_longval(from.longval());
    }
    if (from._has_bit(2)) {
      set_boolval(from.boolval());
    }
    if (from._has_bit(3)) {
      set_stringval(from.stringval());
    }
    if (from._has_bit(4)) {
      set_doubleval(from.doubleval());
    }
    if (from._has_bit(5)) {
      set_floatval(from.floatval());
    }
    if (from._has_bit(6)) {
      set_charval(from.charval());
    }
    if (from._has_bit(7)) {
      set_bindval(from.bindval());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_dateval(from.dateval());
    }
    if (from._has_bit(9)) {
      set_null(from.null());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Value::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value::CopyFrom(const Value& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {
  
  return true;
}

void Value::Swap(Value* other) {
  if (other != this) {
    std::swap(integerval_, other->integerval_);
    std::swap(longval_, other->longval_);
    std::swap(boolval_, other->boolval_);
    std::swap(stringval_, other->stringval_);
    std::swap(doubleval_, other->doubleval_);
    std::swap(floatval_, other->floatval_);
    std::swap(charval_, other->charval_);
    std::swap(bindval_, other->bindval_);
    std::swap(dateval_, other->dateval_);
    std::swap(null_, other->null_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Value::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Value_descriptor_;
  metadata.reflection = Value_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Expression::kColumnFieldNumber;
const int Expression::kValueFieldNumber;
const int Expression::kFunctionFieldNumber;
#endif  // !_MSC_VER

Expression::Expression()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Expression::InitAsDefaultInstance() {
  column_ = const_cast< ::protobuf::Column*>(&::protobuf::Column::default_instance());
  value_ = const_cast< ::protobuf::Value*>(&::protobuf::Value::default_instance());
  function_ = const_cast< ::protobuf::Function*>(&::protobuf::Function::default_instance());
}

Expression::Expression(const Expression& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Expression::SharedCtor() {
  _cached_size_ = 0;
  column_ = NULL;
  value_ = NULL;
  function_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Expression::~Expression() {
  SharedDtor();
}

void Expression::SharedDtor() {
  if (this != default_instance_) {
    delete column_;
    delete value_;
    delete function_;
  }
}

void Expression::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Expression::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Expression_descriptor_;
}

const Expression& Expression::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();  return *default_instance_;
}

Expression* Expression::default_instance_ = NULL;

Expression* Expression::New() const {
  return new Expression;
}

void Expression::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (column_ != NULL) column_->::protobuf::Column::Clear();
    }
    if (_has_bit(1)) {
      if (value_ != NULL) value_->::protobuf::Value::Clear();
    }
    if (_has_bit(2)) {
      if (function_ != NULL) function_->::protobuf::Function::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Expression::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protobuf.Column column = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_column()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // optional .protobuf.Value value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_function;
        break;
      }
      
      // optional .protobuf.Function function = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_function:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_function()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Expression::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protobuf.Column column = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->column(), output);
  }
  
  // optional .protobuf.Value value = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->value(), output);
  }
  
  // optional .protobuf.Function function = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->function(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Expression::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protobuf.Column column = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->column(), target);
  }
  
  // optional .protobuf.Value value = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->value(), target);
  }
  
  // optional .protobuf.Function function = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->function(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Expression::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protobuf.Column column = 1;
    if (has_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->column());
    }
    
    // optional .protobuf.Value value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }
    
    // optional .protobuf.Function function = 3;
    if (has_function()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->function());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Expression::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Expression* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Expression*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Expression::MergeFrom(const Expression& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_column()->::protobuf::Column::MergeFrom(from.column());
    }
    if (from._has_bit(1)) {
      mutable_value()->::protobuf::Value::MergeFrom(from.value());
    }
    if (from._has_bit(2)) {
      mutable_function()->::protobuf::Function::MergeFrom(from.function());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Expression::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Expression::CopyFrom(const Expression& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Expression::IsInitialized() const {
  
  return true;
}

void Expression::Swap(Expression* other) {
  if (other != this) {
    std::swap(column_, other->column_);
    std::swap(value_, other->value_);
    std::swap(function_, other->function_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Expression::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Expression_descriptor_;
  metadata.reflection = Expression_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string Function::_default_functionname_;
const ::std::string Function::_default_alias_;
const ::std::string Function::_default_tablename_;
const ::std::string Function::_default_columnname_;
#ifndef _MSC_VER
const int Function::kFunctionNameFieldNumber;
const int Function::kExpressionFieldNumber;
const int Function::kAliasFieldNumber;
const int Function::kDistinctFieldNumber;
const int Function::kTableNameFieldNumber;
const int Function::kColumnNameFieldNumber;
const int Function::kIsNotFieldNumber;
#endif  // !_MSC_VER

Function::Function()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Function::InitAsDefaultInstance() {
}

Function::Function(const Function& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Function::SharedCtor() {
  _cached_size_ = 0;
  functionname_ = const_cast< ::std::string*>(&_default_functionname_);
  alias_ = const_cast< ::std::string*>(&_default_alias_);
  distinct_ = false;
  tablename_ = const_cast< ::std::string*>(&_default_tablename_);
  columnname_ = const_cast< ::std::string*>(&_default_columnname_);
  isnot_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Function::~Function() {
  SharedDtor();
}

void Function::SharedDtor() {
  if (functionname_ != &_default_functionname_) {
    delete functionname_;
  }
  if (alias_ != &_default_alias_) {
    delete alias_;
  }
  if (tablename_ != &_default_tablename_) {
    delete tablename_;
  }
  if (columnname_ != &_default_columnname_) {
    delete columnname_;
  }
  if (this != default_instance_) {
  }
}

void Function::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Function::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Function_descriptor_;
}

const Function& Function::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();  return *default_instance_;
}

Function* Function::default_instance_ = NULL;

Function* Function::New() const {
  return new Function;
}

void Function::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (functionname_ != &_default_functionname_) {
        functionname_->clear();
      }
    }
    if (_has_bit(2)) {
      if (alias_ != &_default_alias_) {
        alias_->clear();
      }
    }
    distinct_ = false;
    if (_has_bit(4)) {
      if (tablename_ != &_default_tablename_) {
        tablename_->clear();
      }
    }
    if (_has_bit(5)) {
      if (columnname_ != &_default_columnname_) {
        columnname_->clear();
      }
    }
    isnot_ = false;
  }
  expression_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Function::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string functionName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_functionname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->functionname().data(), this->functionname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_expression;
        break;
      }
      
      // repeated .protobuf.Expression expression = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_expression:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_expression()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_expression;
        if (input->ExpectTag(26)) goto parse_alias;
        break;
      }
      
      // optional string alias = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alias:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alias().data(), this->alias().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_distinct;
        break;
      }
      
      // optional bool distinct = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_distinct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &distinct_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_tableName;
        break;
      }
      
      // optional string tableName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tableName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tablename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tablename().data(), this->tablename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_columnName;
        break;
      }
      
      // optional string columnName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_columnName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_columnname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->columnname().data(), this->columnname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isNot;
        break;
      }
      
      // optional bool isNot = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isNot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnot_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Function::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string functionName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->functionname().data(), this->functionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->functionname(), output);
  }
  
  // repeated .protobuf.Expression expression = 2;
  for (int i = 0; i < this->expression_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->expression(i), output);
  }
  
  // optional string alias = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->alias(), output);
  }
  
  // optional bool distinct = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->distinct(), output);
  }
  
  // optional string tableName = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->tablename(), output);
  }
  
  // optional string columnName = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->columnname().data(), this->columnname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->columnname(), output);
  }
  
  // optional bool isNot = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isnot(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Function::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string functionName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->functionname().data(), this->functionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->functionname(), target);
  }
  
  // repeated .protobuf.Expression expression = 2;
  for (int i = 0; i < this->expression_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->expression(i), target);
  }
  
  // optional string alias = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->alias(), target);
  }
  
  // optional bool distinct = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->distinct(), target);
  }
  
  // optional string tableName = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->tablename(), target);
  }
  
  // optional string columnName = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->columnname().data(), this->columnname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->columnname(), target);
  }
  
  // optional bool isNot = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isnot(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Function::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string functionName = 1;
    if (has_functionname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->functionname());
    }
    
    // optional string alias = 3;
    if (has_alias()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alias());
    }
    
    // optional bool distinct = 4;
    if (has_distinct()) {
      total_size += 1 + 1;
    }
    
    // optional string tableName = 5;
    if (has_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tablename());
    }
    
    // optional string columnName = 6;
    if (has_columnname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->columnname());
    }
    
    // optional bool isNot = 7;
    if (has_isnot()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .protobuf.Expression expression = 2;
  total_size += 1 * this->expression_size();
  for (int i = 0; i < this->expression_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->expression(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Function::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Function* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Function*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Function::MergeFrom(const Function& from) {
  GOOGLE_CHECK_NE(&from, this);
  expression_.MergeFrom(from.expression_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_functionname(from.functionname());
    }
    if (from._has_bit(2)) {
      set_alias(from.alias());
    }
    if (from._has_bit(3)) {
      set_distinct(from.distinct());
    }
    if (from._has_bit(4)) {
      set_tablename(from.tablename());
    }
    if (from._has_bit(5)) {
      set_columnname(from.columnname());
    }
    if (from._has_bit(6)) {
      set_isnot(from.isnot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Function::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Function::CopyFrom(const Function& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Function::IsInitialized() const {
  
  return true;
}

void Function::Swap(Function* other) {
  if (other != this) {
    std::swap(functionname_, other->functionname_);
    expression_.Swap(&other->expression_);
    std::swap(alias_, other->alias_);
    std::swap(distinct_, other->distinct_);
    std::swap(tablename_, other->tablename_);
    std::swap(columnname_, other->columnname_);
    std::swap(isnot_, other->isnot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Function::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Function_descriptor_;
  metadata.reflection = Function_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ValuesArray::kValuesFieldNumber;
const int ValuesArray::kEmptyFieldNumber;
#endif  // !_MSC_VER

ValuesArray::ValuesArray()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ValuesArray::InitAsDefaultInstance() {
}

ValuesArray::ValuesArray(const ValuesArray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ValuesArray::SharedCtor() {
  _cached_size_ = 0;
  empty_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ValuesArray::~ValuesArray() {
  SharedDtor();
}

void ValuesArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ValuesArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ValuesArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ValuesArray_descriptor_;
}

const ValuesArray& ValuesArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();  return *default_instance_;
}

ValuesArray* ValuesArray::default_instance_ = NULL;

ValuesArray* ValuesArray::New() const {
  return new ValuesArray;
}

void ValuesArray::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    empty_ = false;
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ValuesArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.Value values = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_values()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_values;
        if (input->ExpectTag(16)) goto parse_empty;
        break;
      }
      
      // optional bool empty = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_empty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &empty_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ValuesArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.Value values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->values(i), output);
  }
  
  // optional bool empty = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->empty(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ValuesArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.Value values = 1;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->values(i), target);
  }
  
  // optional bool empty = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->empty(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ValuesArray::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool empty = 2;
    if (has_empty()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .protobuf.Value values = 1;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ValuesArray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ValuesArray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ValuesArray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ValuesArray::MergeFrom(const ValuesArray& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_empty(from.empty());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ValuesArray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ValuesArray::CopyFrom(const ValuesArray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValuesArray::IsInitialized() const {
  
  return true;
}

void ValuesArray::Swap(ValuesArray* other) {
  if (other != this) {
    values_.Swap(&other->values_);
    std::swap(empty_, other->empty_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ValuesArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ValuesArray_descriptor_;
  metadata.reflection = ValuesArray_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ColumnsArray::kColumnsFieldNumber;
#endif  // !_MSC_VER

ColumnsArray::ColumnsArray()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ColumnsArray::InitAsDefaultInstance() {
}

ColumnsArray::ColumnsArray(const ColumnsArray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ColumnsArray::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColumnsArray::~ColumnsArray() {
  SharedDtor();
}

void ColumnsArray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ColumnsArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColumnsArray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColumnsArray_descriptor_;
}

const ColumnsArray& ColumnsArray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();  return *default_instance_;
}

ColumnsArray* ColumnsArray::default_instance_ = NULL;

ColumnsArray* ColumnsArray::New() const {
  return new ColumnsArray;
}

void ColumnsArray::Clear() {
  columns_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColumnsArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.Column columns = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_columns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_columns()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_columns;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ColumnsArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.Column columns = 1;
  for (int i = 0; i < this->columns_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->columns(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ColumnsArray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.Column columns = 1;
  for (int i = 0; i < this->columns_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->columns(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ColumnsArray::ByteSize() const {
  int total_size = 0;
  
  // repeated .protobuf.Column columns = 1;
  total_size += 1 * this->columns_size();
  for (int i = 0; i < this->columns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->columns(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColumnsArray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColumnsArray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColumnsArray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColumnsArray::MergeFrom(const ColumnsArray& from) {
  GOOGLE_CHECK_NE(&from, this);
  columns_.MergeFrom(from.columns_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColumnsArray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnsArray::CopyFrom(const ColumnsArray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnsArray::IsInitialized() const {
  
  return true;
}

void ColumnsArray::Swap(ColumnsArray* other) {
  if (other != this) {
    columns_.Swap(&other->columns_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColumnsArray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColumnsArray_descriptor_;
  metadata.reflection = ColumnsArray_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Column_AGGREGATE_FUNC_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Column_AGGREGATE_FUNC_descriptor_;
}
bool Column_AGGREGATE_FUNC_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Column_AGGREGATE_FUNC Column::COUNT;
const Column_AGGREGATE_FUNC Column::SUM;
const Column_AGGREGATE_FUNC Column::MAX;
const Column_AGGREGATE_FUNC Column::MIN;
const Column_AGGREGATE_FUNC Column::AVG;
const Column_AGGREGATE_FUNC Column::AGGREGATE_FUNC_MIN;
const Column_AGGREGATE_FUNC Column::AGGREGATE_FUNC_MAX;
const int Column::AGGREGATE_FUNC_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Column_ValueType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Column_ValueType_descriptor_;
}
bool Column_ValueType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Column_ValueType Column::LONG_VAL;
const Column_ValueType Column::SHORT_VAL;
const Column_ValueType Column::BOOLEAN_VAL;
const Column_ValueType Column::CHAR_VAL;
const Column_ValueType Column::STRING_VAL;
const Column_ValueType Column::FLOAT_VAL;
const Column_ValueType Column::DOUBLE_VAL;
const Column_ValueType Column::INT_VAL;
const Column_ValueType Column::BIND_VAL;
const Column_ValueType Column::DATE_VAL;
const Column_ValueType Column::BYTES_VAL;
const Column_ValueType Column::TIMESTAMP;
const Column_ValueType Column::ValueType_MIN;
const Column_ValueType Column::ValueType_MAX;
const int Column::ValueType_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string Column::_default_columnname_;
const ::std::string Column::_default_alias_;
const ::std::string Column::_default_tablename_;
#ifndef _MSC_VER
const int Column::kColumnNameFieldNumber;
const int Column::kValueTypeFieldNumber;
const int Column::kAggegateFunctionFieldNumber;
const int Column::kAliasFieldNumber;
const int Column::kDistinctFieldNumber;
const int Column::kTablenameFieldNumber;
const int Column::kIsNotFieldNumber;
#endif  // !_MSC_VER

Column::Column()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Column::InitAsDefaultInstance() {
}

Column::Column(const Column& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Column::SharedCtor() {
  _cached_size_ = 0;
  columnname_ = const_cast< ::std::string*>(&_default_columnname_);
  valuetype_ = 1;
  aggegatefunction_ = 1;
  alias_ = const_cast< ::std::string*>(&_default_alias_);
  distinct_ = false;
  tablename_ = const_cast< ::std::string*>(&_default_tablename_);
  isnot_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Column::~Column() {
  SharedDtor();
}

void Column::SharedDtor() {
  if (columnname_ != &_default_columnname_) {
    delete columnname_;
  }
  if (alias_ != &_default_alias_) {
    delete alias_;
  }
  if (tablename_ != &_default_tablename_) {
    delete tablename_;
  }
  if (this != default_instance_) {
  }
}

void Column::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Column::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Column_descriptor_;
}

const Column& Column::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();  return *default_instance_;
}

Column* Column::default_instance_ = NULL;

Column* Column::New() const {
  return new Column;
}

void Column::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (columnname_ != &_default_columnname_) {
        columnname_->clear();
      }
    }
    valuetype_ = 1;
    aggegatefunction_ = 1;
    if (_has_bit(3)) {
      if (alias_ != &_default_alias_) {
        alias_->clear();
      }
    }
    distinct_ = false;
    if (_has_bit(5)) {
      if (tablename_ != &_default_tablename_) {
        tablename_->clear();
      }
    }
    isnot_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Column::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string columnName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_columnname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->columnname().data(), this->columnname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_valueType;
        break;
      }
      
      // optional .protobuf.Column.ValueType valueType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valueType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf::Column_ValueType_IsValid(value)) {
            set_valuetype(static_cast< ::protobuf::Column_ValueType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_aggegateFunction;
        break;
      }
      
      // optional .protobuf.Column.AGGREGATE_FUNC aggegateFunction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aggegateFunction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf::Column_AGGREGATE_FUNC_IsValid(value)) {
            set_aggegatefunction(static_cast< ::protobuf::Column_AGGREGATE_FUNC >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_alias;
        break;
      }
      
      // optional string alias = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alias:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alias().data(), this->alias().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_distinct;
        break;
      }
      
      // optional bool distinct = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_distinct:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &distinct_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_tablename;
        break;
      }
      
      // optional string tablename = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tablename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tablename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tablename().data(), this->tablename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isNot;
        break;
      }
      
      // optional bool isNot = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isNot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnot_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Column::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string columnName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->columnname().data(), this->columnname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->columnname(), output);
  }
  
  // optional .protobuf.Column.ValueType valueType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->valuetype(), output);
  }
  
  // optional .protobuf.Column.AGGREGATE_FUNC aggegateFunction = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->aggegatefunction(), output);
  }
  
  // optional string alias = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->alias(), output);
  }
  
  // optional bool distinct = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->distinct(), output);
  }
  
  // optional string tablename = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->tablename(), output);
  }
  
  // optional bool isNot = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isnot(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Column::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string columnName = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->columnname().data(), this->columnname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->columnname(), target);
  }
  
  // optional .protobuf.Column.ValueType valueType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->valuetype(), target);
  }
  
  // optional .protobuf.Column.AGGREGATE_FUNC aggegateFunction = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->aggegatefunction(), target);
  }
  
  // optional string alias = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->alias(), target);
  }
  
  // optional bool distinct = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->distinct(), target);
  }
  
  // optional string tablename = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->tablename(), target);
  }
  
  // optional bool isNot = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isnot(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Column::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string columnName = 1;
    if (has_columnname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->columnname());
    }
    
    // optional .protobuf.Column.ValueType valueType = 2;
    if (has_valuetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->valuetype());
    }
    
    // optional .protobuf.Column.AGGREGATE_FUNC aggegateFunction = 3;
    if (has_aggegatefunction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->aggegatefunction());
    }
    
    // optional string alias = 4;
    if (has_alias()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alias());
    }
    
    // optional bool distinct = 5;
    if (has_distinct()) {
      total_size += 1 + 1;
    }
    
    // optional string tablename = 6;
    if (has_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tablename());
    }
    
    // optional bool isNot = 7;
    if (has_isnot()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Column::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Column* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Column*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Column::MergeFrom(const Column& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_columnname(from.columnname());
    }
    if (from._has_bit(1)) {
      set_valuetype(from.valuetype());
    }
    if (from._has_bit(2)) {
      set_aggegatefunction(from.aggegatefunction());
    }
    if (from._has_bit(3)) {
      set_alias(from.alias());
    }
    if (from._has_bit(4)) {
      set_distinct(from.distinct());
    }
    if (from._has_bit(5)) {
      set_tablename(from.tablename());
    }
    if (from._has_bit(6)) {
      set_isnot(from.isnot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Column::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Column::CopyFrom(const Column& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Column::IsInitialized() const {
  
  return true;
}

void Column::Swap(Column* other) {
  if (other != this) {
    std::swap(columnname_, other->columnname_);
    std::swap(valuetype_, other->valuetype_);
    std::swap(aggegatefunction_, other->aggegatefunction_);
    std::swap(alias_, other->alias_);
    std::swap(distinct_, other->distinct_);
    std::swap(tablename_, other->tablename_);
    std::swap(isnot_, other->isnot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Column::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Column_descriptor_;
  metadata.reflection = Column_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* OrderBy_DIRECTION_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderBy_DIRECTION_descriptor_;
}
bool OrderBy_DIRECTION_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const OrderBy_DIRECTION OrderBy::ASC;
const OrderBy_DIRECTION OrderBy::DESC;
const OrderBy_DIRECTION OrderBy::DIRECTION_MIN;
const OrderBy_DIRECTION OrderBy::DIRECTION_MAX;
const int OrderBy::DIRECTION_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int OrderBy::kDirectionFieldNumber;
const int OrderBy::kColumnFieldNumber;
#endif  // !_MSC_VER

OrderBy::OrderBy()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OrderBy::InitAsDefaultInstance() {
  column_ = const_cast< ::protobuf::Expression*>(&::protobuf::Expression::default_instance());
}

OrderBy::OrderBy(const OrderBy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OrderBy::SharedCtor() {
  _cached_size_ = 0;
  direction_ = 1;
  column_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OrderBy::~OrderBy() {
  SharedDtor();
}

void OrderBy::SharedDtor() {
  if (this != default_instance_) {
    delete column_;
  }
}

void OrderBy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OrderBy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OrderBy_descriptor_;
}

const OrderBy& OrderBy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();  return *default_instance_;
}

OrderBy* OrderBy::default_instance_ = NULL;

OrderBy* OrderBy::New() const {
  return new OrderBy;
}

void OrderBy::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    direction_ = 1;
    if (_has_bit(1)) {
      if (column_ != NULL) column_->::protobuf::Expression::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OrderBy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protobuf.OrderBy.DIRECTION direction = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf::OrderBy_DIRECTION_IsValid(value)) {
            set_direction(static_cast< ::protobuf::OrderBy_DIRECTION >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_column;
        break;
      }
      
      // optional .protobuf.Expression column = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_column:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_column()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OrderBy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protobuf.OrderBy.DIRECTION direction = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->direction(), output);
  }
  
  // optional .protobuf.Expression column = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->column(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OrderBy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protobuf.OrderBy.DIRECTION direction = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->direction(), target);
  }
  
  // optional .protobuf.Expression column = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->column(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OrderBy::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protobuf.OrderBy.DIRECTION direction = 1;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
    }
    
    // optional .protobuf.Expression column = 2;
    if (has_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->column());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OrderBy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OrderBy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OrderBy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OrderBy::MergeFrom(const OrderBy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_direction(from.direction());
    }
    if (from._has_bit(1)) {
      mutable_column()->::protobuf::Expression::MergeFrom(from.column());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OrderBy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OrderBy::CopyFrom(const OrderBy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrderBy::IsInitialized() const {
  
  return true;
}

void OrderBy::Swap(OrderBy* other) {
  if (other != this) {
    std::swap(direction_, other->direction_);
    std::swap(column_, other->column_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OrderBy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OrderBy_descriptor_;
  metadata.reflection = OrderBy_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string ResultSet::_default_exception_;
#ifndef _MSC_VER
const int ResultSet::kKeyColumnsFieldNumber;
const int ResultSet::kKeyRowsFieldNumber;
const int ResultSet::kExceptionFieldNumber;
const int ResultSet::kTransactionIdFieldNumber;
const int ResultSet::kResultSetIdFieldNumber;
const int ResultSet::kSuccessFieldNumber;
const int ResultSet::kValColumnsFieldNumber;
const int ResultSet::kValRowsFieldNumber;
const int ResultSet::kExtraRouteMsgFieldNumber;
const int ResultSet::kOrderByFieldNumber;
const int ResultSet::kSelectionColumnFieldNumber;
#endif  // !_MSC_VER

ResultSet::ResultSet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResultSet::InitAsDefaultInstance() {
  extraroutemsg_ = const_cast< ::protobuf::ExtraMsg*>(&::protobuf::ExtraMsg::default_instance());
}

ResultSet::ResultSet(const ResultSet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResultSet::SharedCtor() {
  _cached_size_ = 0;
  exception_ = const_cast< ::std::string*>(&_default_exception_);
  transactionid_ = GOOGLE_LONGLONG(0);
  resultsetid_ = 0;
  success_ = false;
  extraroutemsg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResultSet::~ResultSet() {
  SharedDtor();
}

void ResultSet::SharedDtor() {
  if (exception_ != &_default_exception_) {
    delete exception_;
  }
  if (this != default_instance_) {
    delete extraroutemsg_;
  }
}

void ResultSet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultSet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultSet_descriptor_;
}

const ResultSet& ResultSet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();  return *default_instance_;
}

ResultSet* ResultSet::default_instance_ = NULL;

ResultSet* ResultSet::New() const {
  return new ResultSet;
}

void ResultSet::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (_has_bit(2)) {
      if (exception_ != &_default_exception_) {
        exception_->clear();
      }
    }
    transactionid_ = GOOGLE_LONGLONG(0);
    resultsetid_ = 0;
    success_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (_has_bit(8)) {
      if (extraroutemsg_ != NULL) extraroutemsg_->::protobuf::ExtraMsg::Clear();
    }
  }
  keycolumns_.Clear();
  keyrows_.Clear();
  valcolumns_.Clear();
  valrows_.Clear();
  orderby_.Clear();
  selectioncolumn_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResultSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.Expression keyColumns = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyColumns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keycolumns()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_keyColumns;
        if (input->ExpectTag(18)) goto parse_keyRows;
        break;
      }
      
      // repeated .protobuf.ValuesArray keyRows = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyRows:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keyrows()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_keyRows;
        if (input->ExpectTag(26)) goto parse_exception;
        break;
      }
      
      // optional string exception = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exception:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exception()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->exception().data(), this->exception().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_transactionId;
        break;
      }
      
      // optional int64 transactionId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transactionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transactionid_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_resultSetId;
        break;
      }
      
      // optional int32 resultSetId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resultSetId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resultsetid_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_success;
        break;
      }
      
      // optional bool success = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_valColumns;
        break;
      }
      
      // repeated .protobuf.Expression valColumns = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_valColumns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_valcolumns()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_valColumns;
        if (input->ExpectTag(66)) goto parse_valRows;
        break;
      }
      
      // repeated .protobuf.ValuesArray valRows = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_valRows:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_valrows()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_valRows;
        if (input->ExpectTag(74)) goto parse_extraRouteMsg;
        break;
      }
      
      // optional .protobuf.ExtraMsg extraRouteMsg = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extraRouteMsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extraroutemsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_orderBy;
        break;
      }
      
      // repeated .protobuf.OrderBy orderBy = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orderBy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_orderby()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_orderBy;
        if (input->ExpectTag(90)) goto parse_selectionColumn;
        break;
      }
      
      // repeated .protobuf.Expression selectionColumn = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selectionColumn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_selectioncolumn()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_selectionColumn;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResultSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.Expression keyColumns = 1;
  for (int i = 0; i < this->keycolumns_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->keycolumns(i), output);
  }
  
  // repeated .protobuf.ValuesArray keyRows = 2;
  for (int i = 0; i < this->keyrows_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->keyrows(i), output);
  }
  
  // optional string exception = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exception().data(), this->exception().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->exception(), output);
  }
  
  // optional int64 transactionId = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->transactionid(), output);
  }
  
  // optional int32 resultSetId = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->resultsetid(), output);
  }
  
  // optional bool success = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->success(), output);
  }
  
  // repeated .protobuf.Expression valColumns = 7;
  for (int i = 0; i < this->valcolumns_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->valcolumns(i), output);
  }
  
  // repeated .protobuf.ValuesArray valRows = 8;
  for (int i = 0; i < this->valrows_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->valrows(i), output);
  }
  
  // optional .protobuf.ExtraMsg extraRouteMsg = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->extraroutemsg(), output);
  }
  
  // repeated .protobuf.OrderBy orderBy = 10;
  for (int i = 0; i < this->orderby_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->orderby(i), output);
  }
  
  // repeated .protobuf.Expression selectionColumn = 11;
  for (int i = 0; i < this->selectioncolumn_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->selectioncolumn(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResultSet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.Expression keyColumns = 1;
  for (int i = 0; i < this->keycolumns_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->keycolumns(i), target);
  }
  
  // repeated .protobuf.ValuesArray keyRows = 2;
  for (int i = 0; i < this->keyrows_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->keyrows(i), target);
  }
  
  // optional string exception = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->exception().data(), this->exception().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exception(), target);
  }
  
  // optional int64 transactionId = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->transactionid(), target);
  }
  
  // optional int32 resultSetId = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->resultsetid(), target);
  }
  
  // optional bool success = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->success(), target);
  }
  
  // repeated .protobuf.Expression valColumns = 7;
  for (int i = 0; i < this->valcolumns_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->valcolumns(i), target);
  }
  
  // repeated .protobuf.ValuesArray valRows = 8;
  for (int i = 0; i < this->valrows_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->valrows(i), target);
  }
  
  // optional .protobuf.ExtraMsg extraRouteMsg = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->extraroutemsg(), target);
  }
  
  // repeated .protobuf.OrderBy orderBy = 10;
  for (int i = 0; i < this->orderby_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->orderby(i), target);
  }
  
  // repeated .protobuf.Expression selectionColumn = 11;
  for (int i = 0; i < this->selectioncolumn_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->selectioncolumn(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResultSet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional string exception = 3;
    if (has_exception()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->exception());
    }
    
    // optional int64 transactionId = 4;
    if (has_transactionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transactionid());
    }
    
    // optional int32 resultSetId = 5;
    if (has_resultsetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resultsetid());
    }
    
    // optional bool success = 6;
    if (has_success()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .protobuf.ExtraMsg extraRouteMsg = 9;
    if (has_extraroutemsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extraroutemsg());
    }
    
  }
  // repeated .protobuf.Expression keyColumns = 1;
  total_size += 1 * this->keycolumns_size();
  for (int i = 0; i < this->keycolumns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keycolumns(i));
  }
  
  // repeated .protobuf.ValuesArray keyRows = 2;
  total_size += 1 * this->keyrows_size();
  for (int i = 0; i < this->keyrows_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keyrows(i));
  }
  
  // repeated .protobuf.Expression valColumns = 7;
  total_size += 1 * this->valcolumns_size();
  for (int i = 0; i < this->valcolumns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->valcolumns(i));
  }
  
  // repeated .protobuf.ValuesArray valRows = 8;
  total_size += 1 * this->valrows_size();
  for (int i = 0; i < this->valrows_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->valrows(i));
  }
  
  // repeated .protobuf.OrderBy orderBy = 10;
  total_size += 1 * this->orderby_size();
  for (int i = 0; i < this->orderby_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->orderby(i));
  }
  
  // repeated .protobuf.Expression selectionColumn = 11;
  total_size += 1 * this->selectioncolumn_size();
  for (int i = 0; i < this->selectioncolumn_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->selectioncolumn(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultSet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResultSet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResultSet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResultSet::MergeFrom(const ResultSet& from) {
  GOOGLE_CHECK_NE(&from, this);
  keycolumns_.MergeFrom(from.keycolumns_);
  keyrows_.MergeFrom(from.keyrows_);
  valcolumns_.MergeFrom(from.valcolumns_);
  valrows_.MergeFrom(from.valrows_);
  orderby_.MergeFrom(from.orderby_);
  selectioncolumn_.MergeFrom(from.selectioncolumn_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from._has_bit(2)) {
      set_exception(from.exception());
    }
    if (from._has_bit(3)) {
      set_transactionid(from.transactionid());
    }
    if (from._has_bit(4)) {
      set_resultsetid(from.resultsetid());
    }
    if (from._has_bit(5)) {
      set_success(from.success());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      mutable_extraroutemsg()->::protobuf::ExtraMsg::MergeFrom(from.extraroutemsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResultSet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultSet::CopyFrom(const ResultSet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultSet::IsInitialized() const {
  
  return true;
}

void ResultSet::Swap(ResultSet* other) {
  if (other != this) {
    keycolumns_.Swap(&other->keycolumns_);
    keyrows_.Swap(&other->keyrows_);
    std::swap(exception_, other->exception_);
    std::swap(transactionid_, other->transactionid_);
    std::swap(resultsetid_, other->resultsetid_);
    std::swap(success_, other->success_);
    valcolumns_.Swap(&other->valcolumns_);
    valrows_.Swap(&other->valrows_);
    std::swap(extraroutemsg_, other->extraroutemsg_);
    orderby_.Swap(&other->orderby_);
    selectioncolumn_.Swap(&other->selectioncolumn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResultSet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResultSet_descriptor_;
  metadata.reflection = ResultSet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExtraMsg::kExtraRouteKeyFieldNumber;
const int ExtraMsg::kExtraRouteValueFieldNumber;
#endif  // !_MSC_VER

ExtraMsg::ExtraMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExtraMsg::InitAsDefaultInstance() {
  extraroutevalue_ = const_cast< ::protobuf::ValuesArray*>(&::protobuf::ValuesArray::default_instance());
}

ExtraMsg::ExtraMsg(const ExtraMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExtraMsg::SharedCtor() {
  _cached_size_ = 0;
  extraroutevalue_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExtraMsg::~ExtraMsg() {
  SharedDtor();
}

void ExtraMsg::SharedDtor() {
  if (this != default_instance_) {
    delete extraroutevalue_;
  }
}

void ExtraMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtraMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtraMsg_descriptor_;
}

const ExtraMsg& ExtraMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();  return *default_instance_;
}

ExtraMsg* ExtraMsg::default_instance_ = NULL;

ExtraMsg* ExtraMsg::New() const {
  return new ExtraMsg;
}

void ExtraMsg::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (_has_bit(1)) {
      if (extraroutevalue_ != NULL) extraroutevalue_->::protobuf::ValuesArray::Clear();
    }
  }
  extraroutekey_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExtraMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string extraRouteKey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extraRouteKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_extraroutekey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->extraroutekey(0).data(), this->extraroutekey(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_extraRouteKey;
        if (input->ExpectTag(18)) goto parse_extraRouteValue;
        break;
      }
      
      // optional .protobuf.ValuesArray extraRouteValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extraRouteValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extraroutevalue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExtraMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string extraRouteKey = 1;
  for (int i = 0; i < this->extraroutekey_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->extraroutekey(i).data(), this->extraroutekey(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->extraroutekey(i), output);
  }
  
  // optional .protobuf.ValuesArray extraRouteValue = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->extraroutevalue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExtraMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string extraRouteKey = 1;
  for (int i = 0; i < this->extraroutekey_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->extraroutekey(i).data(), this->extraroutekey(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->extraroutekey(i), target);
  }
  
  // optional .protobuf.ValuesArray extraRouteValue = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->extraroutevalue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExtraMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .protobuf.ValuesArray extraRouteValue = 2;
    if (has_extraroutevalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extraroutevalue());
    }
    
  }
  // repeated string extraRouteKey = 1;
  total_size += 1 * this->extraroutekey_size();
  for (int i = 0; i < this->extraroutekey_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->extraroutekey(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtraMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExtraMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExtraMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExtraMsg::MergeFrom(const ExtraMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  extraroutekey_.MergeFrom(from.extraroutekey_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      mutable_extraroutevalue()->::protobuf::ValuesArray::MergeFrom(from.extraroutevalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExtraMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtraMsg::CopyFrom(const ExtraMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtraMsg::IsInitialized() const {
  
  return true;
}

void ExtraMsg::Swap(ExtraMsg* other) {
  if (other != this) {
    extraroutekey_.Swap(&other->extraroutekey_);
    std::swap(extraroutevalue_, other->extraroutevalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExtraMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExtraMsg_descriptor_;
  metadata.reflection = ExtraMsg_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* QueryCommon_QUERY_CONCURRENCY_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryCommon_QUERY_CONCURRENCY_descriptor_;
}
bool QueryCommon_QUERY_CONCURRENCY_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const QueryCommon_QUERY_CONCURRENCY QueryCommon::SEQUENTIAL;
const QueryCommon_QUERY_CONCURRENCY QueryCommon::CONCURRENT;
const QueryCommon_QUERY_CONCURRENCY QueryCommon::QUERY_CONCURRENCY_MIN;
const QueryCommon_QUERY_CONCURRENCY QueryCommon::QUERY_CONCURRENCY_MAX;
const int QueryCommon::QUERY_CONCURRENCY_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* QueryCommon_PlanType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryCommon_PlanType_descriptor_;
}
bool QueryCommon_PlanType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const QueryCommon_PlanType QueryCommon::NEST_LOOP_JOIN;
const QueryCommon_PlanType QueryCommon::SORT_MERGE_JOIN;
const QueryCommon_PlanType QueryCommon::HASH_JOIN;
const QueryCommon_PlanType QueryCommon::QUERY;
const QueryCommon_PlanType QueryCommon::INDEX_NEST_LOOP;
const QueryCommon_PlanType QueryCommon::MERGE;
const QueryCommon_PlanType QueryCommon::PlanType_MIN;
const QueryCommon_PlanType QueryCommon::PlanType_MAX;
const int QueryCommon::PlanType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* QueryCommon_LockModel_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryCommon_LockModel_descriptor_;
}
bool QueryCommon_LockModel_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const QueryCommon_LockModel QueryCommon::SHARED_LOCK;
const QueryCommon_LockModel QueryCommon::EXCLUSIVE_LOCK;
const QueryCommon_LockModel QueryCommon::LockModel_MIN;
const QueryCommon_LockModel QueryCommon::LockModel_MAX;
const int QueryCommon::LockModel_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string QueryCommon::_default_idxname_;
const ::std::string QueryCommon::_default_datanodekey_;
const ::std::string QueryCommon::_default_alias_;
const ::std::string QueryCommon::_default_requesthostname_;
const ::std::string QueryCommon::_default_actualtable_;
#ifndef _MSC_VER
const int QueryCommon::kOrderByFieldNumber;
const int QueryCommon::kLimitFromFieldNumber;
const int QueryCommon::kLimitToFieldNumber;
const int QueryCommon::kValueFiltersFieldNumber;
const int QueryCommon::kSelectionColumnFieldNumber;
const int QueryCommon::kGroupByFieldNumber;
const int QueryCommon::kKeyFilterFieldNumber;
const int QueryCommon::kIdxNameFieldNumber;
const int QueryCommon::kPlanNodeTypeFieldNumber;
const int QueryCommon::kSubNodesFieldNumber;
const int QueryCommon::kDataNodeKeyFieldNumber;
const int QueryCommon::kLockModelFieldNumber;
const int QueryCommon::kConsistentReadFieldNumber;
const int QueryCommon::kQueryConcurrencyFieldNumber;
const int QueryCommon::kLeftOuterFieldNumber;
const int QueryCommon::kRightOuterFieldNumber;
const int QueryCommon::kRightJoinOnColumnFieldNumber;
const int QueryCommon::kLeftJoinOnColumnFieldNumber;
const int QueryCommon::kAliasFieldNumber;
const int QueryCommon::kRequestIDFieldNumber;
const int QueryCommon::kRequestHostNameFieldNumber;
const int QueryCommon::kSubRequestIDFieldNumber;
const int QueryCommon::kThreadFieldNumber;
const int QueryCommon::kShardedFieldNumber;
const int QueryCommon::kCanMergeFieldNumber;
const int QueryCommon::kUseTempTableExplicitFieldNumber;
const int QueryCommon::kActualTableFieldNumber;
const int QueryCommon::kIsSubQueryFieldNumber;
const int QueryCommon::kIsUnionFieldNumber;
const int QueryCommon::kOtherJoinFilterFieldNumber;
#endif  // !_MSC_VER

QueryCommon::QueryCommon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QueryCommon::InitAsDefaultInstance() {
  valuefilters_ = const_cast< ::protobuf::Filter*>(&::protobuf::Filter::default_instance());
  keyfilter_ = const_cast< ::protobuf::Filter*>(&::protobuf::Filter::default_instance());
  otherjoinfilter_ = const_cast< ::protobuf::Filter*>(&::protobuf::Filter::default_instance());
}

QueryCommon::QueryCommon(const QueryCommon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QueryCommon::SharedCtor() {
  _cached_size_ = 0;
  limitfrom_ = GOOGLE_LONGLONG(0);
  limitto_ = GOOGLE_LONGLONG(0);
  valuefilters_ = NULL;
  keyfilter_ = NULL;
  idxname_ = const_cast< ::std::string*>(&_default_idxname_);
  plannodetype_ = 1;
  datanodekey_ = const_cast< ::std::string*>(&_default_datanodekey_);
  lockmodel_ = 1;
  consistentread_ = false;
  queryconcurrency_ = 1;
  leftouter_ = false;
  rightouter_ = false;
  alias_ = const_cast< ::std::string*>(&_default_alias_);
  requestid_ = GOOGLE_LONGLONG(0);
  requesthostname_ = const_cast< ::std::string*>(&_default_requesthostname_);
  subrequestid_ = 0;
  thread_ = 0;
  sharded_ = false;
  canmerge_ = false;
  usetemptableexplicit_ = false;
  actualtable_ = const_cast< ::std::string*>(&_default_actualtable_);
  issubquery_ = false;
  isunion_ = false;
  otherjoinfilter_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryCommon::~QueryCommon() {
  SharedDtor();
}

void QueryCommon::SharedDtor() {
  if (idxname_ != &_default_idxname_) {
    delete idxname_;
  }
  if (datanodekey_ != &_default_datanodekey_) {
    delete datanodekey_;
  }
  if (alias_ != &_default_alias_) {
    delete alias_;
  }
  if (requesthostname_ != &_default_requesthostname_) {
    delete requesthostname_;
  }
  if (actualtable_ != &_default_actualtable_) {
    delete actualtable_;
  }
  if (this != default_instance_) {
    delete valuefilters_;
    delete keyfilter_;
    delete otherjoinfilter_;
  }
}

void QueryCommon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryCommon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryCommon_descriptor_;
}

const QueryCommon& QueryCommon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();  return *default_instance_;
}

QueryCommon* QueryCommon::default_instance_ = NULL;

QueryCommon* QueryCommon::New() const {
  return new QueryCommon;
}

void QueryCommon::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    limitfrom_ = GOOGLE_LONGLONG(0);
    limitto_ = GOOGLE_LONGLONG(0);
    if (_has_bit(3)) {
      if (valuefilters_ != NULL) valuefilters_->::protobuf::Filter::Clear();
    }
    if (_has_bit(6)) {
      if (keyfilter_ != NULL) keyfilter_->::protobuf::Filter::Clear();
    }
    if (_has_bit(7)) {
      if (idxname_ != &_default_idxname_) {
        idxname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    plannodetype_ = 1;
    if (_has_bit(10)) {
      if (datanodekey_ != &_default_datanodekey_) {
        datanodekey_->clear();
      }
    }
    lockmodel_ = 1;
    consistentread_ = false;
    queryconcurrency_ = 1;
    leftouter_ = false;
    rightouter_ = false;
  }
  if (_has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    if (_has_bit(18)) {
      if (alias_ != &_default_alias_) {
        alias_->clear();
      }
    }
    requestid_ = GOOGLE_LONGLONG(0);
    if (_has_bit(20)) {
      if (requesthostname_ != &_default_requesthostname_) {
        requesthostname_->clear();
      }
    }
    subrequestid_ = 0;
    thread_ = 0;
    sharded_ = false;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    canmerge_ = false;
    usetemptableexplicit_ = false;
    if (_has_bit(26)) {
      if (actualtable_ != &_default_actualtable_) {
        actualtable_->clear();
      }
    }
    issubquery_ = false;
    isunion_ = false;
    if (_has_bit(29)) {
      if (otherjoinfilter_ != NULL) otherjoinfilter_->::protobuf::Filter::Clear();
    }
  }
  orderby_.Clear();
  selectioncolumn_.Clear();
  groupby_.Clear();
  subnodes_.Clear();
  rightjoinoncolumn_.Clear();
  leftjoinoncolumn_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryCommon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.OrderBy orderBy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orderBy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_orderby()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_orderBy;
        if (input->ExpectTag(16)) goto parse_limitFrom;
        break;
      }
      
      // optional int64 limitFrom = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limitFrom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &limitfrom_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_limitTo;
        break;
      }
      
      // optional int64 limitTo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limitTo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &limitto_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_valueFilters;
        break;
      }
      
      // optional .protobuf.Filter valueFilters = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_valueFilters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_valuefilters()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_selectionColumn;
        break;
      }
      
      // repeated .protobuf.Expression selectionColumn = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selectionColumn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_selectioncolumn()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_selectionColumn;
        if (input->ExpectTag(50)) goto parse_groupBy;
        break;
      }
      
      // repeated .protobuf.OrderBy groupBy = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupBy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_groupby()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_groupBy;
        if (input->ExpectTag(58)) goto parse_keyFilter;
        break;
      }
      
      // optional .protobuf.Filter keyFilter = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyFilter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_keyfilter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_idxName;
        break;
      }
      
      // optional string idxName = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_idxName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_idxname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->idxname().data(), this->idxname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_planNodeType;
        break;
      }
      
      // optional .protobuf.QueryCommon.PlanType planNodeType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_planNodeType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf::QueryCommon_PlanType_IsValid(value)) {
            set_plannodetype(static_cast< ::protobuf::QueryCommon_PlanType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_subNodes;
        break;
      }
      
      // repeated .protobuf.CommandNode subNodes = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subNodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subnodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_subNodes;
        if (input->ExpectTag(98)) goto parse_dataNodeKey;
        break;
      }
      
      // optional string dataNodeKey = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dataNodeKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datanodekey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datanodekey().data(), this->datanodekey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_lockModel;
        break;
      }
      
      // optional .protobuf.QueryCommon.LockModel lockModel = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lockModel:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf::QueryCommon_LockModel_IsValid(value)) {
            set_lockmodel(static_cast< ::protobuf::QueryCommon_LockModel >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_consistentRead;
        break;
      }
      
      // optional bool consistentRead = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consistentRead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &consistentread_)));
          _set_bit(12);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_queryConcurrency;
        break;
      }
      
      // optional .protobuf.QueryCommon.QUERY_CONCURRENCY queryConcurrency = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_queryConcurrency:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf::QueryCommon_QUERY_CONCURRENCY_IsValid(value)) {
            set_queryconcurrency(static_cast< ::protobuf::QueryCommon_QUERY_CONCURRENCY >(value));
          } else {
            mutable_unknown_fields()->AddVarint(15, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_leftOuter;
        break;
      }
      
      // optional bool leftOuter = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftOuter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &leftouter_)));
          _set_bit(14);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_rightOuter;
        break;
      }
      
      // optional bool rightOuter = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rightOuter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rightouter_)));
          _set_bit(15);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_rightJoinOnColumn;
        break;
      }
      
      // repeated .protobuf.Column rightJoinOnColumn = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rightJoinOnColumn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rightjoinoncolumn()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_rightJoinOnColumn;
        if (input->ExpectTag(154)) goto parse_leftJoinOnColumn;
        break;
      }
      
      // repeated .protobuf.Column leftJoinOnColumn = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leftJoinOnColumn:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_leftjoinoncolumn()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_leftJoinOnColumn;
        if (input->ExpectTag(162)) goto parse_alias;
        break;
      }
      
      // optional string alias = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_alias:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->alias().data(), this->alias().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_requestID;
        break;
      }
      
      // optional int64 requestID = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_requestID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &requestid_)));
          _set_bit(19);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_requestHostName;
        break;
      }
      
      // optional string requestHostName = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_requestHostName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_requesthostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->requesthostname().data(), this->requesthostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_subRequestID;
        break;
      }
      
      // optional int32 subRequestID = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subRequestID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subrequestid_)));
          _set_bit(21);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_thread;
        break;
      }
      
      // optional int32 thread = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thread:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thread_)));
          _set_bit(22);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_sharded;
        break;
      }
      
      // optional bool sharded = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sharded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sharded_)));
          _set_bit(23);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_canMerge;
        break;
      }
      
      // optional bool canMerge = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canMerge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &canmerge_)));
          _set_bit(24);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_useTempTableExplicit;
        break;
      }
      
      // optional bool useTempTableExplicit = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_useTempTableExplicit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usetemptableexplicit_)));
          _set_bit(25);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_actualTable;
        break;
      }
      
      // optional string actualTable = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_actualTable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_actualtable()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->actualtable().data(), this->actualtable().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_isSubQuery;
        break;
      }
      
      // optional bool isSubQuery = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isSubQuery:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issubquery_)));
          _set_bit(27);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_isUnion;
        break;
      }
      
      // optional bool isUnion = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isUnion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isunion_)));
          _set_bit(28);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_otherJoinFilter;
        break;
      }
      
      // optional .protobuf.Filter otherJoinFilter = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_otherJoinFilter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_otherjoinfilter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QueryCommon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .protobuf.OrderBy orderBy = 1;
  for (int i = 0; i < this->orderby_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->orderby(i), output);
  }
  
  // optional int64 limitFrom = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->limitfrom(), output);
  }
  
  // optional int64 limitTo = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->limitto(), output);
  }
  
  // optional .protobuf.Filter valueFilters = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->valuefilters(), output);
  }
  
  // repeated .protobuf.Expression selectionColumn = 5;
  for (int i = 0; i < this->selectioncolumn_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->selectioncolumn(i), output);
  }
  
  // repeated .protobuf.OrderBy groupBy = 6;
  for (int i = 0; i < this->groupby_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->groupby(i), output);
  }
  
  // optional .protobuf.Filter keyFilter = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->keyfilter(), output);
  }
  
  // optional string idxName = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idxname().data(), this->idxname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->idxname(), output);
  }
  
  // optional .protobuf.QueryCommon.PlanType planNodeType = 9;
  if (_has_bit(8)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->plannodetype(), output);
  }
  
  // repeated .protobuf.CommandNode subNodes = 10;
  for (int i = 0; i < this->subnodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->subnodes(i), output);
  }
  
  // optional string dataNodeKey = 12;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datanodekey().data(), this->datanodekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->datanodekey(), output);
  }
  
  // optional .protobuf.QueryCommon.LockModel lockModel = 13;
  if (_has_bit(11)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->lockmodel(), output);
  }
  
  // optional bool consistentRead = 14;
  if (_has_bit(12)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->consistentread(), output);
  }
  
  // optional .protobuf.QueryCommon.QUERY_CONCURRENCY queryConcurrency = 15;
  if (_has_bit(13)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->queryconcurrency(), output);
  }
  
  // optional bool leftOuter = 16;
  if (_has_bit(14)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->leftouter(), output);
  }
  
  // optional bool rightOuter = 17;
  if (_has_bit(15)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->rightouter(), output);
  }
  
  // repeated .protobuf.Column rightJoinOnColumn = 18;
  for (int i = 0; i < this->rightjoinoncolumn_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->rightjoinoncolumn(i), output);
  }
  
  // repeated .protobuf.Column leftJoinOnColumn = 19;
  for (int i = 0; i < this->leftjoinoncolumn_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->leftjoinoncolumn(i), output);
  }
  
  // optional string alias = 20;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->alias(), output);
  }
  
  // optional int64 requestID = 21;
  if (_has_bit(19)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->requestid(), output);
  }
  
  // optional string requestHostName = 22;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->requesthostname().data(), this->requesthostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->requesthostname(), output);
  }
  
  // optional int32 subRequestID = 23;
  if (_has_bit(21)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->subrequestid(), output);
  }
  
  // optional int32 thread = 24;
  if (_has_bit(22)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->thread(), output);
  }
  
  // optional bool sharded = 25;
  if (_has_bit(23)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->sharded(), output);
  }
  
  // optional bool canMerge = 26;
  if (_has_bit(24)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->canmerge(), output);
  }
  
  // optional bool useTempTableExplicit = 27;
  if (_has_bit(25)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->usetemptableexplicit(), output);
  }
  
  // optional string actualTable = 28;
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->actualtable().data(), this->actualtable().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->actualtable(), output);
  }
  
  // optional bool isSubQuery = 29;
  if (_has_bit(27)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->issubquery(), output);
  }
  
  // optional bool isUnion = 30;
  if (_has_bit(28)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->isunion(), output);
  }
  
  // optional .protobuf.Filter otherJoinFilter = 31;
  if (_has_bit(29)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->otherjoinfilter(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QueryCommon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .protobuf.OrderBy orderBy = 1;
  for (int i = 0; i < this->orderby_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->orderby(i), target);
  }
  
  // optional int64 limitFrom = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->limitfrom(), target);
  }
  
  // optional int64 limitTo = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->limitto(), target);
  }
  
  // optional .protobuf.Filter valueFilters = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->valuefilters(), target);
  }
  
  // repeated .protobuf.Expression selectionColumn = 5;
  for (int i = 0; i < this->selectioncolumn_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->selectioncolumn(i), target);
  }
  
  // repeated .protobuf.OrderBy groupBy = 6;
  for (int i = 0; i < this->groupby_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->groupby(i), target);
  }
  
  // optional .protobuf.Filter keyFilter = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->keyfilter(), target);
  }
  
  // optional string idxName = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->idxname().data(), this->idxname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->idxname(), target);
  }
  
  // optional .protobuf.QueryCommon.PlanType planNodeType = 9;
  if (_has_bit(8)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->plannodetype(), target);
  }
  
  // repeated .protobuf.CommandNode subNodes = 10;
  for (int i = 0; i < this->subnodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->subnodes(i), target);
  }
  
  // optional string dataNodeKey = 12;
  if (_has_bit(10)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datanodekey().data(), this->datanodekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->datanodekey(), target);
  }
  
  // optional .protobuf.QueryCommon.LockModel lockModel = 13;
  if (_has_bit(11)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->lockmodel(), target);
  }
  
  // optional bool consistentRead = 14;
  if (_has_bit(12)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->consistentread(), target);
  }
  
  // optional .protobuf.QueryCommon.QUERY_CONCURRENCY queryConcurrency = 15;
  if (_has_bit(13)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->queryconcurrency(), target);
  }
  
  // optional bool leftOuter = 16;
  if (_has_bit(14)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->leftouter(), target);
  }
  
  // optional bool rightOuter = 17;
  if (_has_bit(15)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->rightouter(), target);
  }
  
  // repeated .protobuf.Column rightJoinOnColumn = 18;
  for (int i = 0; i < this->rightjoinoncolumn_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->rightjoinoncolumn(i), target);
  }
  
  // repeated .protobuf.Column leftJoinOnColumn = 19;
  for (int i = 0; i < this->leftjoinoncolumn_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->leftjoinoncolumn(i), target);
  }
  
  // optional string alias = 20;
  if (_has_bit(18)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->alias().data(), this->alias().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->alias(), target);
  }
  
  // optional int64 requestID = 21;
  if (_has_bit(19)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->requestid(), target);
  }
  
  // optional string requestHostName = 22;
  if (_has_bit(20)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->requesthostname().data(), this->requesthostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->requesthostname(), target);
  }
  
  // optional int32 subRequestID = 23;
  if (_has_bit(21)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->subrequestid(), target);
  }
  
  // optional int32 thread = 24;
  if (_has_bit(22)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->thread(), target);
  }
  
  // optional bool sharded = 25;
  if (_has_bit(23)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->sharded(), target);
  }
  
  // optional bool canMerge = 26;
  if (_has_bit(24)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->canmerge(), target);
  }
  
  // optional bool useTempTableExplicit = 27;
  if (_has_bit(25)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(27, this->usetemptableexplicit(), target);
  }
  
  // optional string actualTable = 28;
  if (_has_bit(26)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->actualtable().data(), this->actualtable().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->actualtable(), target);
  }
  
  // optional bool isSubQuery = 29;
  if (_has_bit(27)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->issubquery(), target);
  }
  
  // optional bool isUnion = 30;
  if (_has_bit(28)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->isunion(), target);
  }
  
  // optional .protobuf.Filter otherJoinFilter = 31;
  if (_has_bit(29)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->otherjoinfilter(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QueryCommon::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int64 limitFrom = 2;
    if (has_limitfrom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->limitfrom());
    }
    
    // optional int64 limitTo = 3;
    if (has_limitto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->limitto());
    }
    
    // optional .protobuf.Filter valueFilters = 4;
    if (has_valuefilters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->valuefilters());
    }
    
    // optional .protobuf.Filter keyFilter = 7;
    if (has_keyfilter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->keyfilter());
    }
    
    // optional string idxName = 8;
    if (has_idxname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->idxname());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .protobuf.QueryCommon.PlanType planNodeType = 9;
    if (has_plannodetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->plannodetype());
    }
    
    // optional string dataNodeKey = 12;
    if (has_datanodekey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datanodekey());
    }
    
    // optional .protobuf.QueryCommon.LockModel lockModel = 13;
    if (has_lockmodel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->lockmodel());
    }
    
    // optional bool consistentRead = 14;
    if (has_consistentread()) {
      total_size += 1 + 1;
    }
    
    // optional .protobuf.QueryCommon.QUERY_CONCURRENCY queryConcurrency = 15;
    if (has_queryconcurrency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->queryconcurrency());
    }
    
    // optional bool leftOuter = 16;
    if (has_leftouter()) {
      total_size += 2 + 1;
    }
    
    // optional bool rightOuter = 17;
    if (has_rightouter()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    // optional string alias = 20;
    if (has_alias()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->alias());
    }
    
    // optional int64 requestID = 21;
    if (has_requestid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->requestid());
    }
    
    // optional string requestHostName = 22;
    if (has_requesthostname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->requesthostname());
    }
    
    // optional int32 subRequestID = 23;
    if (has_subrequestid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subrequestid());
    }
    
    // optional int32 thread = 24;
    if (has_thread()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->thread());
    }
    
    // optional bool sharded = 25;
    if (has_sharded()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool canMerge = 26;
    if (has_canmerge()) {
      total_size += 2 + 1;
    }
    
    // optional bool useTempTableExplicit = 27;
    if (has_usetemptableexplicit()) {
      total_size += 2 + 1;
    }
    
    // optional string actualTable = 28;
    if (has_actualtable()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->actualtable());
    }
    
    // optional bool isSubQuery = 29;
    if (has_issubquery()) {
      total_size += 2 + 1;
    }
    
    // optional bool isUnion = 30;
    if (has_isunion()) {
      total_size += 2 + 1;
    }
    
    // optional .protobuf.Filter otherJoinFilter = 31;
    if (has_otherjoinfilter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->otherjoinfilter());
    }
    
  }
  // repeated .protobuf.OrderBy orderBy = 1;
  total_size += 1 * this->orderby_size();
  for (int i = 0; i < this->orderby_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->orderby(i));
  }
  
  // repeated .protobuf.Expression selectionColumn = 5;
  total_size += 1 * this->selectioncolumn_size();
  for (int i = 0; i < this->selectioncolumn_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->selectioncolumn(i));
  }
  
  // repeated .protobuf.OrderBy groupBy = 6;
  total_size += 1 * this->groupby_size();
  for (int i = 0; i < this->groupby_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->groupby(i));
  }
  
  // repeated .protobuf.CommandNode subNodes = 10;
  total_size += 1 * this->subnodes_size();
  for (int i = 0; i < this->subnodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subnodes(i));
  }
  
  // repeated .protobuf.Column rightJoinOnColumn = 18;
  total_size += 2 * this->rightjoinoncolumn_size();
  for (int i = 0; i < this->rightjoinoncolumn_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rightjoinoncolumn(i));
  }
  
  // repeated .protobuf.Column leftJoinOnColumn = 19;
  total_size += 2 * this->leftjoinoncolumn_size();
  for (int i = 0; i < this->leftjoinoncolumn_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->leftjoinoncolumn(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryCommon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryCommon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryCommon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryCommon::MergeFrom(const QueryCommon& from) {
  GOOGLE_CHECK_NE(&from, this);
  orderby_.MergeFrom(from.orderby_);
  selectioncolumn_.MergeFrom(from.selectioncolumn_);
  groupby_.MergeFrom(from.groupby_);
  subnodes_.MergeFrom(from.subnodes_);
  rightjoinoncolumn_.MergeFrom(from.rightjoinoncolumn_);
  leftjoinoncolumn_.MergeFrom(from.leftjoinoncolumn_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from._has_bit(1)) {
      set_limitfrom(from.limitfrom());
    }
    if (from._has_bit(2)) {
      set_limitto(from.limitto());
    }
    if (from._has_bit(3)) {
      mutable_valuefilters()->::protobuf::Filter::MergeFrom(from.valuefilters());
    }
    if (from._has_bit(6)) {
      mutable_keyfilter()->::protobuf::Filter::MergeFrom(from.keyfilter());
    }
    if (from._has_bit(7)) {
      set_idxname(from.idxname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from._has_bit(8)) {
      set_plannodetype(from.plannodetype());
    }
    if (from._has_bit(10)) {
      set_datanodekey(from.datanodekey());
    }
    if (from._has_bit(11)) {
      set_lockmodel(from.lockmodel());
    }
    if (from._has_bit(12)) {
      set_consistentread(from.consistentread());
    }
    if (from._has_bit(13)) {
      set_queryconcurrency(from.queryconcurrency());
    }
    if (from._has_bit(14)) {
      set_leftouter(from.leftouter());
    }
    if (from._has_bit(15)) {
      set_rightouter(from.rightouter());
    }
  }
  if (from._has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    if (from._has_bit(18)) {
      set_alias(from.alias());
    }
    if (from._has_bit(19)) {
      set_requestid(from.requestid());
    }
    if (from._has_bit(20)) {
      set_requesthostname(from.requesthostname());
    }
    if (from._has_bit(21)) {
      set_subrequestid(from.subrequestid());
    }
    if (from._has_bit(22)) {
      set_thread(from.thread());
    }
    if (from._has_bit(23)) {
      set_sharded(from.sharded());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from._has_bit(24)) {
      set_canmerge(from.canmerge());
    }
    if (from._has_bit(25)) {
      set_usetemptableexplicit(from.usetemptableexplicit());
    }
    if (from._has_bit(26)) {
      set_actualtable(from.actualtable());
    }
    if (from._has_bit(27)) {
      set_issubquery(from.issubquery());
    }
    if (from._has_bit(28)) {
      set_isunion(from.isunion());
    }
    if (from._has_bit(29)) {
      mutable_otherjoinfilter()->::protobuf::Filter::MergeFrom(from.otherjoinfilter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryCommon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryCommon::CopyFrom(const QueryCommon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryCommon::IsInitialized() const {
  
  return true;
}

void QueryCommon::Swap(QueryCommon* other) {
  if (other != this) {
    orderby_.Swap(&other->orderby_);
    std::swap(limitfrom_, other->limitfrom_);
    std::swap(limitto_, other->limitto_);
    std::swap(valuefilters_, other->valuefilters_);
    selectioncolumn_.Swap(&other->selectioncolumn_);
    groupby_.Swap(&other->groupby_);
    std::swap(keyfilter_, other->keyfilter_);
    std::swap(idxname_, other->idxname_);
    std::swap(plannodetype_, other->plannodetype_);
    subnodes_.Swap(&other->subnodes_);
    std::swap(datanodekey_, other->datanodekey_);
    std::swap(lockmodel_, other->lockmodel_);
    std::swap(consistentread_, other->consistentread_);
    std::swap(queryconcurrency_, other->queryconcurrency_);
    std::swap(leftouter_, other->leftouter_);
    std::swap(rightouter_, other->rightouter_);
    rightjoinoncolumn_.Swap(&other->rightjoinoncolumn_);
    leftjoinoncolumn_.Swap(&other->leftjoinoncolumn_);
    std::swap(alias_, other->alias_);
    std::swap(requestid_, other->requestid_);
    std::swap(requesthostname_, other->requesthostname_);
    std::swap(subrequestid_, other->subrequestid_);
    std::swap(thread_, other->thread_);
    std::swap(sharded_, other->sharded_);
    std::swap(canmerge_, other->canmerge_);
    std::swap(usetemptableexplicit_, other->usetemptableexplicit_);
    std::swap(actualtable_, other->actualtable_);
    std::swap(issubquery_, other->issubquery_);
    std::swap(isunion_, other->isunion_);
    std::swap(otherjoinfilter_, other->otherjoinfilter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryCommon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryCommon_descriptor_;
  metadata.reflection = QueryCommon_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Put_PUT_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Put_PUT_TYPE_descriptor_;
}
bool Put_PUT_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Put_PUT_TYPE Put::REPLACE;
const Put_PUT_TYPE Put::INSERT;
const Put_PUT_TYPE Put::DELETE;
const Put_PUT_TYPE Put::UPDATE;
const Put_PUT_TYPE Put::PUT_TYPE_MIN;
const Put_PUT_TYPE Put::PUT_TYPE_MAX;
const int Put::PUT_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
const ::std::string Put::_default_indexname_;
const ::std::string Put::_default_datanodekey_;
const ::std::string Put::_default_indexkey_;
#ifndef _MSC_VER
const int Put::kQueryCommonFieldNumber;
const int Put::kColumnsFieldNumber;
const int Put::kIndexNameFieldNumber;
const int Put::kPutTypeFieldNumber;
const int Put::kUpdateValFieldNumber;
const int Put::kDataNodeKeyFieldNumber;
const int Put::kThreadFieldNumber;
const int Put::kIndexKeyFieldNumber;
#endif  // !_MSC_VER

Put::Put()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Put::InitAsDefaultInstance() {
  querycommon_ = const_cast< ::protobuf::QueryCommon*>(&::protobuf::QueryCommon::default_instance());
}

Put::Put(const Put& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Put::SharedCtor() {
  _cached_size_ = 0;
  querycommon_ = NULL;
  indexname_ = const_cast< ::std::string*>(&_default_indexname_);
  puttype_ = 1;
  datanodekey_ = const_cast< ::std::string*>(&_default_datanodekey_);
  thread_ = 0;
  indexkey_ = const_cast< ::std::string*>(&_default_indexkey_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Put::~Put() {
  SharedDtor();
}

void Put::SharedDtor() {
  if (indexname_ != &_default_indexname_) {
    delete indexname_;
  }
  if (datanodekey_ != &_default_datanodekey_) {
    delete datanodekey_;
  }
  if (indexkey_ != &_default_indexkey_) {
    delete indexkey_;
  }
  if (this != default_instance_) {
    delete querycommon_;
  }
}

void Put::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Put::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Put_descriptor_;
}

const Put& Put::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();  return *default_instance_;
}

Put* Put::default_instance_ = NULL;

Put* Put::New() const {
  return new Put;
}

void Put::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (querycommon_ != NULL) querycommon_->::protobuf::QueryCommon::Clear();
    }
    if (_has_bit(2)) {
      if (indexname_ != &_default_indexname_) {
        indexname_->clear();
      }
    }
    puttype_ = 1;
    if (_has_bit(5)) {
      if (datanodekey_ != &_default_datanodekey_) {
        datanodekey_->clear();
      }
    }
    thread_ = 0;
    if (_has_bit(7)) {
      if (indexkey_ != &_default_indexkey_) {
        indexkey_->clear();
      }
    }
  }
  columns_.Clear();
  updateval_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Put::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protobuf.QueryCommon queryCommon = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_querycommon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_columns;
        break;
      }
      
      // repeated .protobuf.Expression columns = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_columns:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_columns()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_columns;
        if (input->ExpectTag(26)) goto parse_indexName;
        break;
      }
      
      // optional string indexName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_indexName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_indexname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->indexname().data(), this->indexname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_putType;
        break;
      }
      
      // optional .protobuf.Put.PUT_TYPE putType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_putType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf::Put_PUT_TYPE_IsValid(value)) {
            set_puttype(static_cast< ::protobuf::Put_PUT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_updateVal;
        break;
      }
      
      // repeated .protobuf.Expression updateVal = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updateVal:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updateval()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_updateVal;
        if (input->ExpectTag(50)) goto parse_dataNodeKey;
        break;
      }
      
      // optional string dataNodeKey = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dataNodeKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datanodekey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datanodekey().data(), this->datanodekey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_thread;
        break;
      }
      
      // optional int32 thread = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thread:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thread_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_indexKey;
        break;
      }
      
      // optional string indexKey = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_indexKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_indexkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->indexkey().data(), this->indexkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Put::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protobuf.QueryCommon queryCommon = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->querycommon(), output);
  }
  
  // repeated .protobuf.Expression columns = 2;
  for (int i = 0; i < this->columns_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->columns(i), output);
  }
  
  // optional string indexName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->indexname().data(), this->indexname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->indexname(), output);
  }
  
  // optional .protobuf.Put.PUT_TYPE putType = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->puttype(), output);
  }
  
  // repeated .protobuf.Expression updateVal = 5;
  for (int i = 0; i < this->updateval_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->updateval(i), output);
  }
  
  // optional string dataNodeKey = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datanodekey().data(), this->datanodekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->datanodekey(), output);
  }
  
  // optional int32 thread = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->thread(), output);
  }
  
  // optional string indexKey = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->indexkey().data(), this->indexkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->indexkey(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Put::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protobuf.QueryCommon queryCommon = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->querycommon(), target);
  }
  
  // repeated .protobuf.Expression columns = 2;
  for (int i = 0; i < this->columns_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->columns(i), target);
  }
  
  // optional string indexName = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->indexname().data(), this->indexname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->indexname(), target);
  }
  
  // optional .protobuf.Put.PUT_TYPE putType = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->puttype(), target);
  }
  
  // repeated .protobuf.Expression updateVal = 5;
  for (int i = 0; i < this->updateval_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->updateval(i), target);
  }
  
  // optional string dataNodeKey = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datanodekey().data(), this->datanodekey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->datanodekey(), target);
  }
  
  // optional int32 thread = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->thread(), target);
  }
  
  // optional string indexKey = 8;
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->indexkey().data(), this->indexkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->indexkey(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Put::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protobuf.QueryCommon queryCommon = 1;
    if (has_querycommon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->querycommon());
    }
    
    // optional string indexName = 3;
    if (has_indexname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->indexname());
    }
    
    // optional .protobuf.Put.PUT_TYPE putType = 4;
    if (has_puttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->puttype());
    }
    
    // optional string dataNodeKey = 6;
    if (has_datanodekey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datanodekey());
    }
    
    // optional int32 thread = 7;
    if (has_thread()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->thread());
    }
    
    // optional string indexKey = 8;
    if (has_indexkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->indexkey());
    }
    
  }
  // repeated .protobuf.Expression columns = 2;
  total_size += 1 * this->columns_size();
  for (int i = 0; i < this->columns_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->columns(i));
  }
  
  // repeated .protobuf.Expression updateVal = 5;
  total_size += 1 * this->updateval_size();
  for (int i = 0; i < this->updateval_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updateval(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Put::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Put* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Put*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Put::MergeFrom(const Put& from) {
  GOOGLE_CHECK_NE(&from, this);
  columns_.MergeFrom(from.columns_);
  updateval_.MergeFrom(from.updateval_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_querycommon()->::protobuf::QueryCommon::MergeFrom(from.querycommon());
    }
    if (from._has_bit(2)) {
      set_indexname(from.indexname());
    }
    if (from._has_bit(3)) {
      set_puttype(from.puttype());
    }
    if (from._has_bit(5)) {
      set_datanodekey(from.datanodekey());
    }
    if (from._has_bit(6)) {
      set_thread(from.thread());
    }
    if (from._has_bit(7)) {
      set_indexkey(from.indexkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Put::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Put::CopyFrom(const Put& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Put::IsInitialized() const {
  
  return true;
}

void Put::Swap(Put* other) {
  if (other != this) {
    std::swap(querycommon_, other->querycommon_);
    columns_.Swap(&other->columns_);
    std::swap(indexname_, other->indexname_);
    std::swap(puttype_, other->puttype_);
    updateval_.Swap(&other->updateval_);
    std::swap(datanodekey_, other->datanodekey_);
    std::swap(thread_, other->thread_);
    std::swap(indexkey_, other->indexkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Put::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Put_descriptor_;
  metadata.reflection = Put_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Filter_AccessType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Filter_AccessType_descriptor_;
}
bool Filter_AccessType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Filter_AccessType Filter::AND;
const Filter_AccessType Filter::OR;
const Filter_AccessType Filter::GT;
const Filter_AccessType Filter::LT;
const Filter_AccessType Filter::GT_EQ;
const Filter_AccessType Filter::LT_EQ;
const Filter_AccessType Filter::EQ;
const Filter_AccessType Filter::LIKE;
const Filter_AccessType Filter::IS_NULL;
const Filter_AccessType Filter::IS_NOT_NULL;
const Filter_AccessType Filter::NOT_EQ;
const Filter_AccessType Filter::IN;
const Filter_AccessType Filter::IS;
const Filter_AccessType Filter::CONSTANT;
const Filter_AccessType Filter::NULL_SAFE_EQUAL;
const Filter_AccessType Filter::AccessType_MIN;
const Filter_AccessType Filter::AccessType_MAX;
const int Filter::AccessType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Filter::kColumnFieldNumber;
const int Filter::kAccessTypeFieldNumber;
const int Filter::kValueFieldNumber;
const int Filter::kSubChildrenFieldNumber;
const int Filter::kValuesFieldNumber;
const int Filter::kInFromUserFieldNumber;
const int Filter::kIsNotFieldNumber;
#endif  // !_MSC_VER

Filter::Filter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Filter::InitAsDefaultInstance() {
  column_ = const_cast< ::protobuf::Expression*>(&::protobuf::Expression::default_instance());
  value_ = const_cast< ::protobuf::Expression*>(&::protobuf::Expression::default_instance());
}

Filter::Filter(const Filter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Filter::SharedCtor() {
  _cached_size_ = 0;
  column_ = NULL;
  accesstype_ = 1;
  value_ = NULL;
  infromuser_ = false;
  isnot_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Filter::~Filter() {
  SharedDtor();
}

void Filter::SharedDtor() {
  if (this != default_instance_) {
    delete column_;
    delete value_;
  }
}

void Filter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Filter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Filter_descriptor_;
}

const Filter& Filter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();  return *default_instance_;
}

Filter* Filter::default_instance_ = NULL;

Filter* Filter::New() const {
  return new Filter;
}

void Filter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (column_ != NULL) column_->::protobuf::Expression::Clear();
    }
    accesstype_ = 1;
    if (_has_bit(2)) {
      if (value_ != NULL) value_->::protobuf::Expression::Clear();
    }
    infromuser_ = false;
    isnot_ = false;
  }
  subchildren_.Clear();
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Filter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protobuf.Expression column = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_column()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accessType;
        break;
      }
      
      // optional .protobuf.Filter.AccessType accessType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accessType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobuf::Filter_AccessType_IsValid(value)) {
            set_accesstype(static_cast< ::protobuf::Filter_AccessType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_value;
        break;
      }
      
      // optional .protobuf.Expression value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_subChildren;
        break;
      }
      
      // repeated .protobuf.Expression subChildren = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_subChildren:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_subchildren()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_subChildren;
        if (input->ExpectTag(42)) goto parse_values;
        break;
      }
      
      // repeated .protobuf.Expression values = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_values()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_values;
        if (input->ExpectTag(48)) goto parse_inFromUser;
        break;
      }
      
      // optional bool inFromUser = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inFromUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &infromuser_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isNot;
        break;
      }
      
      // optional bool isNot = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isNot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnot_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Filter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protobuf.Expression column = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->column(), output);
  }
  
  // optional .protobuf.Filter.AccessType accessType = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->accesstype(), output);
  }
  
  // optional .protobuf.Expression value = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->value(), output);
  }
  
  // repeated .protobuf.Expression subChildren = 4;
  for (int i = 0; i < this->subchildren_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->subchildren(i), output);
  }
  
  // repeated .protobuf.Expression values = 5;
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->values(i), output);
  }
  
  // optional bool inFromUser = 6;
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->infromuser(), output);
  }
  
  // optional bool isNot = 7;
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isnot(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Filter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protobuf.Expression column = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->column(), target);
  }
  
  // optional .protobuf.Filter.AccessType accessType = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->accesstype(), target);
  }
  
  // optional .protobuf.Expression value = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->value(), target);
  }
  
  // repeated .protobuf.Expression subChildren = 4;
  for (int i = 0; i < this->subchildren_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->subchildren(i), target);
  }
  
  // repeated .protobuf.Expression values = 5;
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->values(i), target);
  }
  
  // optional bool inFromUser = 6;
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->infromuser(), target);
  }
  
  // optional bool isNot = 7;
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isnot(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Filter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protobuf.Expression column = 1;
    if (has_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->column());
    }
    
    // optional .protobuf.Filter.AccessType accessType = 2;
    if (has_accesstype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->accesstype());
    }
    
    // optional .protobuf.Expression value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }
    
    // optional bool inFromUser = 6;
    if (has_infromuser()) {
      total_size += 1 + 1;
    }
    
    // optional bool isNot = 7;
    if (has_isnot()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .protobuf.Expression subChildren = 4;
  total_size += 1 * this->subchildren_size();
  for (int i = 0; i < this->subchildren_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->subchildren(i));
  }
  
  // repeated .protobuf.Expression values = 5;
  total_size += 1 * this->values_size();
  for (int i = 0; i < this->values_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->values(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Filter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Filter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Filter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Filter::MergeFrom(const Filter& from) {
  GOOGLE_CHECK_NE(&from, this);
  subchildren_.MergeFrom(from.subchildren_);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_column()->::protobuf::Expression::MergeFrom(from.column());
    }
    if (from._has_bit(1)) {
      set_accesstype(from.accesstype());
    }
    if (from._has_bit(2)) {
      mutable_value()->::protobuf::Expression::MergeFrom(from.value());
    }
    if (from._has_bit(5)) {
      set_infromuser(from.infromuser());
    }
    if (from._has_bit(6)) {
      set_isnot(from.isnot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Filter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Filter::CopyFrom(const Filter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Filter::IsInitialized() const {
  
  return true;
}

void Filter::Swap(Filter* other) {
  if (other != this) {
    std::swap(column_, other->column_);
    std::swap(accesstype_, other->accesstype_);
    std::swap(value_, other->value_);
    subchildren_.Swap(&other->subchildren_);
    values_.Swap(&other->values_);
    std::swap(infromuser_, other->infromuser_);
    std::swap(isnot_, other->isnot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Filter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Filter_descriptor_;
  metadata.reflection = Filter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandNode::kPutFieldNumber;
const int CommandNode::kQueryCommonFieldNumber;
#endif  // !_MSC_VER

CommandNode::CommandNode()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandNode::InitAsDefaultInstance() {
  put_ = const_cast< ::protobuf::Put*>(&::protobuf::Put::default_instance());
  querycommon_ = const_cast< ::protobuf::QueryCommon*>(&::protobuf::QueryCommon::default_instance());
}

CommandNode::CommandNode(const CommandNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandNode::SharedCtor() {
  _cached_size_ = 0;
  put_ = NULL;
  querycommon_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandNode::~CommandNode() {
  SharedDtor();
}

void CommandNode::SharedDtor() {
  if (this != default_instance_) {
    delete put_;
    delete querycommon_;
  }
}

void CommandNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandNode_descriptor_;
}

const CommandNode& CommandNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();  return *default_instance_;
}

CommandNode* CommandNode::default_instance_ = NULL;

CommandNode* CommandNode::New() const {
  return new CommandNode;
}

void CommandNode::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (put_ != NULL) put_->::protobuf::Put::Clear();
    }
    if (_has_bit(1)) {
      if (querycommon_ != NULL) querycommon_->::protobuf::QueryCommon::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protobuf.Put put = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_put()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_queryCommon;
        break;
      }
      
      // optional .protobuf.QueryCommon queryCommon = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_queryCommon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_querycommon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .protobuf.Put put = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->put(), output);
  }
  
  // optional .protobuf.QueryCommon queryCommon = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->querycommon(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .protobuf.Put put = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->put(), target);
  }
  
  // optional .protobuf.QueryCommon queryCommon = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->querycommon(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandNode::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .protobuf.Put put = 1;
    if (has_put()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->put());
    }
    
    // optional .protobuf.QueryCommon queryCommon = 2;
    if (has_querycommon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->querycommon());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandNode::MergeFrom(const CommandNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_put()->::protobuf::Put::MergeFrom(from.put());
    }
    if (from._has_bit(1)) {
      mutable_querycommon()->::protobuf::QueryCommon::MergeFrom(from.querycommon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandNode::CopyFrom(const CommandNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandNode::IsInitialized() const {
  
  return true;
}

void CommandNode::Swap(CommandNode* other) {
  if (other != this) {
    std::swap(put_, other->put_);
    std::swap(querycommon_, other->querycommon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandNode_descriptor_;
  metadata.reflection = CommandNode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommandRequest::kCreateNewTransactionFieldNumber;
const int CommandRequest::kTransactionSequenceFieldNumber;
const int CommandRequest::kCmdNodeFieldNumber;
const int CommandRequest::kExtramsgFieldNumber;
const int CommandRequest::kFetchSizeFieldNumber;
#endif  // !_MSC_VER

CommandRequest::CommandRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommandRequest::InitAsDefaultInstance() {
  cmdnode_ = const_cast< ::protobuf::CommandNode*>(&::protobuf::CommandNode::default_instance());
  extramsg_ = const_cast< ::protobuf::ExtraMsg*>(&::protobuf::ExtraMsg::default_instance());
}

CommandRequest::CommandRequest(const CommandRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommandRequest::SharedCtor() {
  _cached_size_ = 0;
  createnewtransaction_ = false;
  transactionsequence_ = GOOGLE_LONGLONG(0);
  cmdnode_ = NULL;
  extramsg_ = NULL;
  fetchsize_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommandRequest::~CommandRequest() {
  SharedDtor();
}

void CommandRequest::SharedDtor() {
  if (this != default_instance_) {
    delete cmdnode_;
    delete extramsg_;
  }
}

void CommandRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommandRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandRequest_descriptor_;
}

const CommandRequest& CommandRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();  return *default_instance_;
}

CommandRequest* CommandRequest::default_instance_ = NULL;

CommandRequest* CommandRequest::New() const {
  return new CommandRequest;
}

void CommandRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    createnewtransaction_ = false;
    transactionsequence_ = GOOGLE_LONGLONG(0);
    if (_has_bit(2)) {
      if (cmdnode_ != NULL) cmdnode_->::protobuf::CommandNode::Clear();
    }
    if (_has_bit(3)) {
      if (extramsg_ != NULL) extramsg_->::protobuf::ExtraMsg::Clear();
    }
    fetchsize_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommandRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool createNewTransaction = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &createnewtransaction_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_transactionSequence;
        break;
      }
      
      // optional int64 transactionSequence = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_transactionSequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transactionsequence_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_cmdNode;
        break;
      }
      
      // optional .protobuf.CommandNode cmdNode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cmdNode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cmdnode()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_extramsg;
        break;
      }
      
      // optional .protobuf.ExtraMsg extramsg = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extramsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extramsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fetchSize;
        break;
      }
      
      // optional int32 fetchSize = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fetchSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fetchsize_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommandRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool createNewTransaction = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->createnewtransaction(), output);
  }
  
  // optional int64 transactionSequence = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->transactionsequence(), output);
  }
  
  // optional .protobuf.CommandNode cmdNode = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cmdnode(), output);
  }
  
  // optional .protobuf.ExtraMsg extramsg = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->extramsg(), output);
  }
  
  // optional int32 fetchSize = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fetchsize(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommandRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool createNewTransaction = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->createnewtransaction(), target);
  }
  
  // optional int64 transactionSequence = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->transactionsequence(), target);
  }
  
  // optional .protobuf.CommandNode cmdNode = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cmdnode(), target);
  }
  
  // optional .protobuf.ExtraMsg extramsg = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->extramsg(), target);
  }
  
  // optional int32 fetchSize = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fetchsize(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommandRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool createNewTransaction = 1;
    if (has_createnewtransaction()) {
      total_size += 1 + 1;
    }
    
    // optional int64 transactionSequence = 2;
    if (has_transactionsequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transactionsequence());
    }
    
    // optional .protobuf.CommandNode cmdNode = 3;
    if (has_cmdnode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cmdnode());
    }
    
    // optional .protobuf.ExtraMsg extramsg = 4;
    if (has_extramsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extramsg());
    }
    
    // optional int32 fetchSize = 5;
    if (has_fetchsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fetchsize());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommandRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommandRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommandRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommandRequest::MergeFrom(const CommandRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_createnewtransaction(from.createnewtransaction());
    }
    if (from._has_bit(1)) {
      set_transactionsequence(from.transactionsequence());
    }
    if (from._has_bit(2)) {
      mutable_cmdnode()->::protobuf::CommandNode::MergeFrom(from.cmdnode());
    }
    if (from._has_bit(3)) {
      mutable_extramsg()->::protobuf::ExtraMsg::MergeFrom(from.extramsg());
    }
    if (from._has_bit(4)) {
      set_fetchsize(from.fetchsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommandRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandRequest::CopyFrom(const CommandRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRequest::IsInitialized() const {
  
  return true;
}

void CommandRequest::Swap(CommandRequest* other) {
  if (other != this) {
    std::swap(createnewtransaction_, other->createnewtransaction_);
    std::swap(transactionsequence_, other->transactionsequence_);
    std::swap(cmdnode_, other->cmdnode_);
    std::swap(extramsg_, other->extramsg_);
    std::swap(fetchsize_, other->fetchsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommandRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommandRequest_descriptor_;
  metadata.reflection = CommandRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResultSetRequest::kResultSequenceFieldNumber;
const int ResultSetRequest::kFetchSizeFieldNumber;
const int ResultSetRequest::kExtramsgFieldNumber;
#endif  // !_MSC_VER

ResultSetRequest::ResultSetRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResultSetRequest::InitAsDefaultInstance() {
  extramsg_ = const_cast< ::protobuf::ExtraMsg*>(&::protobuf::ExtraMsg::default_instance());
}

ResultSetRequest::ResultSetRequest(const ResultSetRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResultSetRequest::SharedCtor() {
  _cached_size_ = 0;
  resultsequence_ = 0;
  fetchsize_ = 0;
  extramsg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResultSetRequest::~ResultSetRequest() {
  SharedDtor();
}

void ResultSetRequest::SharedDtor() {
  if (this != default_instance_) {
    delete extramsg_;
  }
}

void ResultSetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultSetRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultSetRequest_descriptor_;
}

const ResultSetRequest& ResultSetRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();  return *default_instance_;
}

ResultSetRequest* ResultSetRequest::default_instance_ = NULL;

ResultSetRequest* ResultSetRequest::New() const {
  return new ResultSetRequest;
}

void ResultSetRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    resultsequence_ = 0;
    fetchsize_ = 0;
    if (_has_bit(2)) {
      if (extramsg_ != NULL) extramsg_->::protobuf::ExtraMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResultSetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 resultSequence = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &resultsequence_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fetchSize;
        break;
      }
      
      // optional int32 fetchSize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fetchSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fetchsize_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_extramsg;
        break;
      }
      
      // optional .protobuf.ExtraMsg extramsg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extramsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extramsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResultSetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 resultSequence = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->resultsequence(), output);
  }
  
  // optional int32 fetchSize = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fetchsize(), output);
  }
  
  // optional .protobuf.ExtraMsg extramsg = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->extramsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResultSetRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 resultSequence = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->resultsequence(), target);
  }
  
  // optional int32 fetchSize = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fetchsize(), target);
  }
  
  // optional .protobuf.ExtraMsg extramsg = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->extramsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResultSetRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 resultSequence = 1;
    if (has_resultsequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->resultsequence());
    }
    
    // optional int32 fetchSize = 2;
    if (has_fetchsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fetchsize());
    }
    
    // optional .protobuf.ExtraMsg extramsg = 3;
    if (has_extramsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extramsg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultSetRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResultSetRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResultSetRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResultSetRequest::MergeFrom(const ResultSetRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_resultsequence(from.resultsequence());
    }
    if (from._has_bit(1)) {
      set_fetchsize(from.fetchsize());
    }
    if (from._has_bit(2)) {
      mutable_extramsg()->::protobuf::ExtraMsg::MergeFrom(from.extramsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResultSetRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultSetRequest::CopyFrom(const ResultSetRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultSetRequest::IsInitialized() const {
  
  return true;
}

void ResultSetRequest::Swap(ResultSetRequest* other) {
  if (other != this) {
    std::swap(resultsequence_, other->resultsequence_);
    std::swap(fetchsize_, other->fetchsize_);
    std::swap(extramsg_, other->extramsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResultSetRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResultSetRequest_descriptor_;
  metadata.reflection = ResultSetRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransactionRequest::kTransactionSequenceFieldNumber;
const int TransactionRequest::kExtramsgFieldNumber;
#endif  // !_MSC_VER

TransactionRequest::TransactionRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TransactionRequest::InitAsDefaultInstance() {
  extramsg_ = const_cast< ::protobuf::ExtraMsg*>(&::protobuf::ExtraMsg::default_instance());
}

TransactionRequest::TransactionRequest(const TransactionRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TransactionRequest::SharedCtor() {
  _cached_size_ = 0;
  transactionsequence_ = GOOGLE_LONGLONG(0);
  extramsg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionRequest::~TransactionRequest() {
  SharedDtor();
}

void TransactionRequest::SharedDtor() {
  if (this != default_instance_) {
    delete extramsg_;
  }
}

void TransactionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionRequest_descriptor_;
}

const TransactionRequest& TransactionRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();  return *default_instance_;
}

TransactionRequest* TransactionRequest::default_instance_ = NULL;

TransactionRequest* TransactionRequest::New() const {
  return new TransactionRequest;
}

void TransactionRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    transactionsequence_ = GOOGLE_LONGLONG(0);
    if (_has_bit(1)) {
      if (extramsg_ != NULL) extramsg_->::protobuf::ExtraMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransactionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 transactionSequence = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &transactionsequence_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_extramsg;
        break;
      }
      
      // optional .protobuf.ExtraMsg extramsg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extramsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extramsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TransactionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 transactionSequence = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->transactionsequence(), output);
  }
  
  // optional .protobuf.ExtraMsg extramsg = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->extramsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TransactionRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 transactionSequence = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->transactionsequence(), target);
  }
  
  // optional .protobuf.ExtraMsg extramsg = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->extramsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TransactionRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 transactionSequence = 1;
    if (has_transactionsequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->transactionsequence());
    }
    
    // optional .protobuf.ExtraMsg extramsg = 2;
    if (has_extramsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extramsg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransactionRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransactionRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionRequest::MergeFrom(const TransactionRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_transactionsequence(from.transactionsequence());
    }
    if (from._has_bit(1)) {
      mutable_extramsg()->::protobuf::ExtraMsg::MergeFrom(from.extramsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransactionRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionRequest::CopyFrom(const TransactionRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionRequest::IsInitialized() const {
  
  return true;
}

void TransactionRequest::Swap(TransactionRequest* other) {
  if (other != this) {
    std::swap(transactionsequence_, other->transactionsequence_);
    std::swap(extramsg_, other->extramsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransactionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionRequest_descriptor_;
  metadata.reflection = TransactionRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string LoginRequest::_default_user_;
const ::std::string LoginRequest::_default_password_;
#ifndef _MSC_VER
const int LoginRequest::kUserFieldNumber;
const int LoginRequest::kPasswordFieldNumber;
const int LoginRequest::kExtramsgFieldNumber;
#endif  // !_MSC_VER

LoginRequest::LoginRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginRequest::InitAsDefaultInstance() {
  extramsg_ = const_cast< ::protobuf::ExtraMsg*>(&::protobuf::ExtraMsg::default_instance());
}

LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginRequest::SharedCtor() {
  _cached_size_ = 0;
  user_ = const_cast< ::std::string*>(&_default_user_);
  password_ = const_cast< ::std::string*>(&_default_password_);
  extramsg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRequest::~LoginRequest() {
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  if (user_ != &_default_user_) {
    delete user_;
  }
  if (password_ != &_default_password_) {
    delete password_;
  }
  if (this != default_instance_) {
    delete extramsg_;
  }
}

void LoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRequest_descriptor_;
}

const LoginRequest& LoginRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();  return *default_instance_;
}

LoginRequest* LoginRequest::default_instance_ = NULL;

LoginRequest* LoginRequest::New() const {
  return new LoginRequest;
}

void LoginRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (user_ != &_default_user_) {
        user_->clear();
      }
    }
    if (_has_bit(1)) {
      if (password_ != &_default_password_) {
        password_->clear();
      }
    }
    if (_has_bit(2)) {
      if (extramsg_ != NULL) extramsg_->::protobuf::ExtraMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }
      
      // optional string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_extramsg;
        break;
      }
      
      // optional .protobuf.ExtraMsg extramsg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extramsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extramsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string user = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user(), output);
  }
  
  // optional string password = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }
  
  // optional .protobuf.ExtraMsg extramsg = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->extramsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string user = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }
  
  // optional string password = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }
  
  // optional .protobuf.ExtraMsg extramsg = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->extramsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }
    
    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }
    
    // optional .protobuf.ExtraMsg extramsg = 3;
    if (has_extramsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extramsg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_user(from.user());
    }
    if (from._has_bit(1)) {
      set_password(from.password());
    }
    if (from._has_bit(2)) {
      mutable_extramsg()->::protobuf::ExtraMsg::MergeFrom(from.extramsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  
  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(password_, other->password_);
    std::swap(extramsg_, other->extramsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRequest_descriptor_;
  metadata.reflection = LoginRequest_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string PingRequest::_default_msg_;
#ifndef _MSC_VER
const int PingRequest::kMsgFieldNumber;
const int PingRequest::kExtramsgFieldNumber;
#endif  // !_MSC_VER

PingRequest::PingRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PingRequest::InitAsDefaultInstance() {
  extramsg_ = const_cast< ::protobuf::ExtraMsg*>(&::protobuf::ExtraMsg::default_instance());
}

PingRequest::PingRequest(const PingRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PingRequest::SharedCtor() {
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&_default_msg_);
  extramsg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PingRequest::~PingRequest() {
  SharedDtor();
}

void PingRequest::SharedDtor() {
  if (msg_ != &_default_msg_) {
    delete msg_;
  }
  if (this != default_instance_) {
    delete extramsg_;
  }
}

void PingRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PingRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PingRequest_descriptor_;
}

const PingRequest& PingRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_commands_2eproto();  return *default_instance_;
}

PingRequest* PingRequest::default_instance_ = NULL;

PingRequest* PingRequest::New() const {
  return new PingRequest;
}

void PingRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (msg_ != &_default_msg_) {
        msg_->clear();
      }
    }
    if (_has_bit(1)) {
      if (extramsg_ != NULL) extramsg_->::protobuf::ExtraMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PingRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_extramsg;
        break;
      }
      
      // optional .protobuf.ExtraMsg extramsg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_extramsg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extramsg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PingRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msg(), output);
  }
  
  // optional .protobuf.ExtraMsg extramsg = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->extramsg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PingRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msg = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }
  
  // optional .protobuf.ExtraMsg extramsg = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->extramsg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PingRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }
    
    // optional .protobuf.ExtraMsg extramsg = 2;
    if (has_extramsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->extramsg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PingRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PingRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PingRequest::MergeFrom(const PingRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_msg(from.msg());
    }
    if (from._has_bit(1)) {
      mutable_extramsg()->::protobuf::ExtraMsg::MergeFrom(from.extramsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PingRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingRequest::CopyFrom(const PingRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingRequest::IsInitialized() const {
  
  return true;
}

void PingRequest::Swap(PingRequest* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(extramsg_, other->extramsg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PingRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PingRequest_descriptor_;
  metadata.reflection = PingRequest_reflection_;
  return metadata;
}


// ===================================================================

CommandExecutor::~CommandExecutor() {}

const ::google::protobuf::ServiceDescriptor* CommandExecutor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandExecutor_descriptor_;
}

const ::google::protobuf::ServiceDescriptor* CommandExecutor::GetDescriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommandExecutor_descriptor_;
}

void CommandExecutor::ping(::google::protobuf::RpcController* controller,
                         const ::protobuf::PingRequest*,
                         ::protobuf::ResultSet*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ping() not implemented.");
  done->Run();
}

void CommandExecutor::login(::google::protobuf::RpcController* controller,
                         const ::protobuf::LoginRequest*,
                         ::protobuf::ResultSet*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method login() not implemented.");
  done->Run();
}

void CommandExecutor::execute(::google::protobuf::RpcController* controller,
                         const ::protobuf::CommandRequest*,
                         ::protobuf::ResultSet*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method execute() not implemented.");
  done->Run();
}

void CommandExecutor::fetchNext(::google::protobuf::RpcController* controller,
                         const ::protobuf::ResultSetRequest*,
                         ::protobuf::ResultSet*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method fetchNext() not implemented.");
  done->Run();
}

void CommandExecutor::closeResultSet(::google::protobuf::RpcController* controller,
                         const ::protobuf::ResultSetRequest*,
                         ::protobuf::ResultSet*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method closeResultSet() not implemented.");
  done->Run();
}

void CommandExecutor::commit(::google::protobuf::RpcController* controller,
                         const ::protobuf::TransactionRequest*,
                         ::protobuf::ResultSet*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method commit() not implemented.");
  done->Run();
}

void CommandExecutor::rollback(::google::protobuf::RpcController* controller,
                         const ::protobuf::TransactionRequest*,
                         ::protobuf::ResultSet*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method rollback() not implemented.");
  done->Run();
}

void CommandExecutor::first(::google::protobuf::RpcController* controller,
                         const ::protobuf::ResultSetRequest*,
                         ::protobuf::ResultSet*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method first() not implemented.");
  done->Run();
}

void CommandExecutor::beforeFirst(::google::protobuf::RpcController* controller,
                         const ::protobuf::ResultSetRequest*,
                         ::protobuf::ResultSet*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method beforeFirst() not implemented.");
  done->Run();
}

void CommandExecutor::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), CommandExecutor_descriptor_);
  switch(method->index()) {
    case 0:
      ping(controller,
             ::google::protobuf::down_cast<const ::protobuf::PingRequest*>(request),
             ::google::protobuf::down_cast< ::protobuf::ResultSet*>(response),
             done);
      break;
    case 1:
      login(controller,
             ::google::protobuf::down_cast<const ::protobuf::LoginRequest*>(request),
             ::google::protobuf::down_cast< ::protobuf::ResultSet*>(response),
             done);
      break;
    case 2:
      execute(controller,
             ::google::protobuf::down_cast<const ::protobuf::CommandRequest*>(request),
             ::google::protobuf::down_cast< ::protobuf::ResultSet*>(response),
             done);
      break;
    case 3:
      fetchNext(controller,
             ::google::protobuf::down_cast<const ::protobuf::ResultSetRequest*>(request),
             ::google::protobuf::down_cast< ::protobuf::ResultSet*>(response),
             done);
      break;
    case 4:
      closeResultSet(controller,
             ::google::protobuf::down_cast<const ::protobuf::ResultSetRequest*>(request),
             ::google::protobuf::down_cast< ::protobuf::ResultSet*>(response),
             done);
      break;
    case 5:
      commit(controller,
             ::google::protobuf::down_cast<const ::protobuf::TransactionRequest*>(request),
             ::google::protobuf::down_cast< ::protobuf::ResultSet*>(response),
             done);
      break;
    case 6:
      rollback(controller,
             ::google::protobuf::down_cast<const ::protobuf::TransactionRequest*>(request),
             ::google::protobuf::down_cast< ::protobuf::ResultSet*>(response),
             done);
      break;
    case 7:
      first(controller,
             ::google::protobuf::down_cast<const ::protobuf::ResultSetRequest*>(request),
             ::google::protobuf::down_cast< ::protobuf::ResultSet*>(response),
             done);
      break;
    case 8:
      beforeFirst(controller,
             ::google::protobuf::down_cast<const ::protobuf::ResultSetRequest*>(request),
             ::google::protobuf::down_cast< ::protobuf::ResultSet*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& CommandExecutor::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::protobuf::PingRequest::default_instance();
    case 1:
      return ::protobuf::LoginRequest::default_instance();
    case 2:
      return ::protobuf::CommandRequest::default_instance();
    case 3:
      return ::protobuf::ResultSetRequest::default_instance();
    case 4:
      return ::protobuf::ResultSetRequest::default_instance();
    case 5:
      return ::protobuf::TransactionRequest::default_instance();
    case 6:
      return ::protobuf::TransactionRequest::default_instance();
    case 7:
      return ::protobuf::ResultSetRequest::default_instance();
    case 8:
      return ::protobuf::ResultSetRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

const ::google::protobuf::Message& CommandExecutor::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::protobuf::ResultSet::default_instance();
    case 1:
      return ::protobuf::ResultSet::default_instance();
    case 2:
      return ::protobuf::ResultSet::default_instance();
    case 3:
      return ::protobuf::ResultSet::default_instance();
    case 4:
      return ::protobuf::ResultSet::default_instance();
    case 5:
      return ::protobuf::ResultSet::default_instance();
    case 6:
      return ::protobuf::ResultSet::default_instance();
    case 7:
      return ::protobuf::ResultSet::default_instance();
    case 8:
      return ::protobuf::ResultSet::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *reinterpret_cast< ::google::protobuf::Message*>(NULL);
  }
}

CommandExecutor_Stub::CommandExecutor_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
CommandExecutor_Stub::CommandExecutor_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
CommandExecutor_Stub::~CommandExecutor_Stub() {
  if (owns_channel_) delete channel_;
}

void CommandExecutor_Stub::ping(::google::protobuf::RpcController* controller,
                              const ::protobuf::PingRequest* request,
                              ::protobuf::ResultSet* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void CommandExecutor_Stub::login(::google::protobuf::RpcController* controller,
                              const ::protobuf::LoginRequest* request,
                              ::protobuf::ResultSet* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void CommandExecutor_Stub::execute(::google::protobuf::RpcController* controller,
                              const ::protobuf::CommandRequest* request,
                              ::protobuf::ResultSet* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void CommandExecutor_Stub::fetchNext(::google::protobuf::RpcController* controller,
                              const ::protobuf::ResultSetRequest* request,
                              ::protobuf::ResultSet* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void CommandExecutor_Stub::closeResultSet(::google::protobuf::RpcController* controller,
                              const ::protobuf::ResultSetRequest* request,
                              ::protobuf::ResultSet* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void CommandExecutor_Stub::commit(::google::protobuf::RpcController* controller,
                              const ::protobuf::TransactionRequest* request,
                              ::protobuf::ResultSet* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void CommandExecutor_Stub::rollback(::google::protobuf::RpcController* controller,
                              const ::protobuf::TransactionRequest* request,
                              ::protobuf::ResultSet* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}
void CommandExecutor_Stub::first(::google::protobuf::RpcController* controller,
                              const ::protobuf::ResultSetRequest* request,
                              ::protobuf::ResultSet* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(7),
                       controller, request, response, done);
}
void CommandExecutor_Stub::beforeFirst(::google::protobuf::RpcController* controller,
                              const ::protobuf::ResultSetRequest* request,
                              ::protobuf::ResultSet* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(8),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
